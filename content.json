{"meta":{"title":"ciazhar","subtitle":"Someone INTJs","description":"Blog yang berisi konten dan tutorial yang berkaitan dengan pemrograman dan teknologi.","author":"Muhammad Hafidz","url":"http://ciazhar.github.io"},"pages":[],"posts":[{"title":"Membuat Launcher di Linux","slug":"linux/membuat-laucher-di-linux","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/10/15/linux/membuat-laucher-di-linux/","link":"","permalink":"http://ciazhar.github.io/2017/10/15/linux/membuat-laucher-di-linux/","excerpt":"","text":"Membuat Launcher di LinuxApakah anda pernah menginstall apikasi di linux ? Sebenearnya di linux terdapat banyak cara dalam menginstall aplikasi tergantung dari jenis filenya, diantaranya : Menggunakan Software Center. Menggunakan perintah sudo apt install {nama_package} pada terminal Menggunakan executable file dengan ektensi seperti .deb, .rpm atau .sh Menggunakan binary file yang di kompres dalam .tar.gz. Untuk aplikasi yang di kompress dalam .tar.gz, terkadang setelah menginstallnya, sistem tidak otomatis membuat Launcher untuk aplikasi tersebut. Sehingga kita harus membuat Launcher secara manual.Launcher sendiri bisa dibilang cara GUI/Shortcut untuk menjalankan aplikasi tersebut. Biasanya terletak di whisker (star menu kalo di wndws). Oleh karena itu kita akan coba membuat Launcher untuk aplikasi kita. Saya akan memberi contoh untuk membuat launcher aplikasi Robomongo. 1. Pindah direktori ke /usr/share/applications/ menggunakan terminal1cd /usr/share/appications/ 2. Buat file berekesensi .dekstop. Nama file dapat diesusaikan dengan nama apikasi1touch robomongo.desktop 3. Buka file tersebut menggunakan teks editor kesayangan anda. Disini saya akan menggunakan gedit1sudo gedit robomongo.desktop 4. Isi file tersebut dengan format seperti di bawah ini12345678910[Desktop Entry]Version=Type=Name=Comment=Exec=Icon=Path=Terminal=StartupNotify= Keterangan : Version : versi aplikasi Type : tipe aplikasi Name : nama aplikasi Comment : comment aplikasi Exec : cara mengeksekusi aplikasi tsb Icon : direktori untuk icon aplikasi tersebut Path : direktori aplikasi tersebut Terminal : apakah aplikasi khusus untuk berjalan di terminal StartupNotify : apakah akan ada notifikasi waktu aplikasi berjalan Berikut contohnya untuk aplikasi Robomongo saya : 12345678910[Desktop Entry]Version=1.0Type=ApplicationName=RobomongoComment=RobomongoExec=/home/ciazhar/Application/robomongo-1.0.0/bin/robomongoIcon=/home/ciazhar/Application/robomongo-1.0.0/CWNda0_WwAAWE-F.pngPath=/home/ciazhar/Application/robomongo-1.0.0Terminal=falseStartupNotify=false Finally Laucher telah dapat digunakan dan sudah tersedia di whisker.","categories":[{"name":"Linux","slug":"Linux","permalink":"http://ciazhar.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ciazhar.github.io/tags/linux/"}]},{"title":"Testing in Spring Framework","slug":"pemrograman/spring/test/test","date":"un00fin00","updated":"un44fin44","comments":true,"path":"2017/09/17/pemrograman/spring/test/test/","link":"","permalink":"http://ciazhar.github.io/2017/09/17/pemrograman/spring/test/test/","excerpt":"","text":"buat class test pada rest dari class controller tambahkan anotasi @RunWith(SpringJUnit4ClassRunner::class) private val productController : ProductController ?= null private val mockMvc : MockMvc ?=null. mock ini akan digunakan untuk menjalankan testing","categories":[],"tags":[]},{"title":"Command Command pada Linux","slug":"linux/command-linux","date":"un11fin11","updated":"un44fin44","comments":true,"path":"2017/08/28/linux/command-linux/","link":"","permalink":"http://ciazhar.github.io/2017/08/28/linux/command-linux/","excerpt":"","text":"Mengatur PATH environment variable di Linux12cd /usr/binsudo ln -s /path/to/binary binary-name","categories":[{"name":"Linux","slug":"Linux","permalink":"http://ciazhar.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ciazhar.github.io/tags/linux/"}]},{"title":"Cloud Foundry","slug":"pemrograman/devops/cloud-foundry/cloud-foundry-intro","date":"un11fin11","updated":"un44fin44","comments":true,"path":"2017/08/21/pemrograman/devops/cloud-foundry/cloud-foundry-intro/","link":"","permalink":"http://ciazhar.github.io/2017/08/21/pemrograman/devops/cloud-foundry/cloud-foundry-intro/","excerpt":"","text":"Definisi Cloud FoundryCloud Foundry adalah suatu Paas(Platform as a Service) berbasis open source yang disediakan dikembangkan Pivotal. Platform as a service sendiri adalah service yang digunakan untuk mendeploy aplikasi kita ke cloud. Perbedaan Traditional IT, Infrastructure as a Service (IaaS), Platform as a Service (PaaS) dan Software as a Service (SaaS). Deploy aplikasi ke Pivotal Cloud Foundry##1. Install Cloud Foundry CLIKunjungi tautan berikut untuk totorial bagaimana menginstall Cloud Foundry CLI. ##2. Login ke pivotal API Gunakan command cf login -a api.run.pivotal.io pada command line untuk login. Kemudian anda akan diminta memasukkan email dan password Kemudian pilih space mana yang akan anda gunakan ##3. Buat file konfgurasiBuat file bernama manifest.yml dan simpan di bagian terluar project anda. Berikut isi dari file tersebut :1234567---applications:- name: spring-boot-cloud-foundry path: target/spring-boot.jar domain: cfapps.io memory: 512m instance: 1 Keterangan : name : nama aplikasi path : letak file hasil kompilasi berada domain : domain aplikasi memory : memory aplikasi instance : jumlah instance/replikasi aplikasi ##4. Push ke Cloud FoundryGunakan perintah cf push pada terminal untuk melakukan push aplikasi ke cloud foundry. Kemudian akan terlihat log. Tunggu beberapa saat sampai aplikasi anda terdeploy. ##5. Mengubah Konfigurasi ServiceGunakn perintah cf update-service nama-service -c &#39;konfigurasinya&#39;Contoh :cf update-service config-server -c &#39;{&quot;git&quot;: { &quot;uri&quot;: &quot;http://example.com/config&quot; } }&#39; Login ke servic mysqlmysql -u b42da3b446621e -pd66fa990 -h us-cdbr-iron-east-05.cleardb.net ad_a2227b61d61fce9","categories":[],"tags":[]},{"title":"Melakukan Tracing antar Microservice menggunakan Netflix Sleuth","slug":"pemrograman/spring/microservice/distibused-tracing-sleuth/sleuth-for-distribused-tracing","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/08/20/pemrograman/spring/microservice/distibused-tracing-sleuth/sleuth-for-distribused-tracing/","link":"","permalink":"http://ciazhar.github.io/2017/08/20/pemrograman/spring/microservice/distibused-tracing-sleuth/sleuth-for-distribused-tracing/","excerpt":"","text":"Spring Cloud Netflix Sleuth digunakan untuk membuat log tracing antar service. Sleuth dalam melakukan tracing, dia menggunakan Trace ID dan Span ID. Trace ID merupakan id yang digunakan untuk mentracing lintas service. Sedangkan Span ID merupakan ID yang digunakan untuk mentracing internal service. Implement Sleuth Tambahkan dependency spring-cloud-starter-sleuth dan spring-boot-starter-web Komunikasi Data antar Sleuth Client Controller pada client pertama (jalan di port 8080) 1234567891011@RestControllerpublic class SimpleController &#123; org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this); @RequestMapping(\"/api/halo\") public String halo ()&#123; LOGGER.info(\"Sampai ke Server\") return \"Halo ini dari Client Satu\"; &#125;&#125; Konfigurasi RestTemplate pada client kedua (jalan di port 8081)12345678@Configurationpublic class SimpleConfig &#123; @Bean RestTemplate restTemplate()&#123; return new RestTemplate(); &#125;&#125; Sletuh akan terinjek kedalam restTemplate lewat Bean di atas. Controller pada client kedua1234567891011@RestControllerpublic class SimpleController &#123; @Autowired private RestTemplate restTemplate; org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this); @RequestMapping(\"/api/halo\") public String halo()&#123; LOGGER.info(\"Sebelum sampai ke server\"); return restTemplate.getForObject(\"http://localhost:8080/api/halo\",String.class); LOGGER.info(\"Setelah sampai ke server); &#125;&#125;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Membuat API Gatewat Menggunakan Netflix Zuul","slug":"pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/08/18/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway/","link":"","permalink":"http://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway/","excerpt":"","text":"Spring Cloud Netflix Zuul merupakan gerbang utama yang akan dilewati oleh request dari apps atau website yang menuju backend. Zuul dapat berfungsi sebagai API Gateway, security, dll. Membuat API GatewaySebelumnya kita telah membuat eureka server dan eureka client yang terintegrasi dengan Hystrix.Sekarang kita akan mencoba membuat api gatewat dan mengintegrasikanya. Buat project baru menggunakan Spring Initializr Tambahkan dependency spring-cloud-starter-zuul. Tambahkan anotasi @EnableZuulProxy pada main class Tambahkan konfigurasi zuul1234567891011121314spring: application: name: api-gatewayzuul: prefix: /api routes: eureka-client: path: /pertama/** serviceId: EUREKA-CLIENT other-eureka-client: path: /kedua/** serviceId: OTHER-EUREKA-CLIENTserver: port: 8004 Dengan adanya API Gateway untuk memanggil API dari masing masing backend tidak harus memanggilnya secara manual dengan menyebutkan portnya, tetapi hanya perlu memanggilnya via API Gateway sesuai pathnya. Nantinya service yang bernama eureka-client akan diinisialisasi menggunakan path /pertama. Sedangkan service yang bernama eureka-client akan diinisialisasi menggunakan path /kedua. Apabila dulu jika ingin mengakses API di service eureka-client menggunakan http://localhost:8002/api/halo sekarang dapat diganti dengan http://localhost:8004/api/pertama/api/halo. Sedangkan apabila dulu jika ingin mengakses API di service other-eureka-client menggunakan http://localhost:8003/api/halo sekarang dapat diganti dengan http://localhost:8004/api/kedua/api/halo. Hal ini akan meringankan beban dalam development aplikasi karena tidak perlu menghafal port untuk setiap servicenya, tetapi hanya perlu mengetahui nama servinya. Konfigurasi tambahan1234567891011121314151617181920# Konfigurasi Config Servicespring: cloud: config: uri: http://localhost:10003# Konfigurasi Discovery Serviceeureka: client: service-url: defaultZone: http://localhost:8001/eureka# Konfigurasi Circuit Breakerhystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 10000","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Membuat Circuit Breaker menggunakan Netflix Hystrix","slug":"pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/","link":"","permalink":"http://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/","excerpt":"","text":"Spring Cloud Netflix Hystrix digunakan untuk memeberikan fallback apabila terjadi kegagalan saat request antar service dengan cara melakukan Load Balancing. Defending API from failure by bringing callbackSebelumnya kita telah membuat eureka server. Sekarang kita akan coba mendefend API kita yang tedapat pada aplikasi other-eureka-client. Berikut konfigurasi pada client kedua. Tambahkan dependency spring-cloud-starter-hystrix. Tambahkan anotasi @EnableCircuitBreaker pada main class. Tambahkan anotasi @HystrixCommand pada API yang ingin di fallback. Tambahkan parameter fallbackMethod di dalam command tersebut. Valuenya merujuk pada nama methode yang berisi string yang akan ditampilkan saat fallback. 1234567891011///Berikut contoh controller APInya@RequestMapping(\"/api/halo\")@HystrixCommand(fallbackMethod = \"fallback\")public String halo()&#123; return restTemplate.getForObject(\"http://eureka-client/api/halo\",String.class);&#125;///Berikut contoh method yang akan menampilkan string fallbackpublic String fallback(Throwable hystrixCommand)&#123; return \"Fallback Halo\";&#125; Set berapa milisecond lantency untuk metrigger fallback1234567hystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 10000 Apabila request dari other-eureka-client ke eureka-client sukses makan akan tampil String seperti “Halo ini dari Client Satu”. Sedangkan apabila gagal maka akan tampil String seperti “Fallback Halo”.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Mengirim Email dan Verifikasi Lewat Email","slug":"pemrograman/spring/mail/sending-mail","date":"un44fin44","updated":"un44fin44","comments":true,"path":"2017/08/17/pemrograman/spring/mail/sending-mail/","link":"","permalink":"http://ciazhar.github.io/2017/08/17/pemrograman/spring/mail/sending-mail/","excerpt":"","text":"Pada tutorial kali ini kita akan coba mengirim email dan verifikasi lewat email. Kita akan menggunakan konsep register akun implementasinya. https://myaccount.google.com/lesssecureapps Mengirim Email Tambahkan Dependency spring-boot-starter-mail Konfigurasi Mail Server 12345678910111213141516# Mail Configuration mail: host: smtp.gmail.com port: 587 username: email@gmail.com #ini nama email password: pass #ini password email properties: mail: smtp: starttls: enabled: true required: true auth: true connectiontimeout: 5000 timemout: 5000 writetimeout: 5000 Membuat Model Email. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class EmailStatus&#123; public static final String SUCCESS = \"SUCCESS\"; public static final String ERROR = \"ERROR\"; private final String to; private final String subject; private final String body; private String status; private String errorMessage; public EmailStatus(String to, String subject, String body) &#123; this.to = to; this.subject = subject; this.body = body; &#125; public EmailStatus success() &#123; this.status = SUCCESS; return this; &#125; public EmailStatus error(String errorMessage) &#123; this.status = ERROR; this.errorMessage = errorMessage; return this; &#125; public boolean isSuccess() &#123; return SUCCESS.equals(this.status); &#125; public boolean isError() &#123; return ERROR.equals(this.status); &#125; public String getTo() &#123; return to; &#125; public String getSubject() &#123; return subject; &#125; public String getBody() &#123; return body; &#125; public String getStatus() &#123; return status; &#125; public String getErrorMessage() &#123; return errorMessage; &#125;&#125; Membuat component untuk send email 12345678910111213141516171819202122232425262728293031@Componentpublic class EmailSender&#123; @Autowired JavaMailSender javaMailSender; Logger logger = LoggerFactory.getLogger(this.getClass()); public EmailStatus sendPlainText(String to, String subject, String text) &#123; return sendM(to, subject, text, false); &#125; public EmailStatus sendHtml(String to, String subject, String htmlBody) &#123; return sendM(to, subject, htmlBody, true); &#125; private EmailStatus sendM(String to, String subject, String text, Boolean isHtml) &#123; try &#123; MimeMessage mail = javaMailSender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(mail, true); helper.setTo(to); helper.setSubject(subject); helper.setText(text, isHtml); javaMailSender.send(mail); logger.info(\"Send email '&#123;&#125;' to: &#123;&#125;\", subject, to); return new EmailStatus(to, subject, text).success(); &#125; catch (Exception e) &#123; logger.error(String.format(\"Problem with sending email to: &#123;&#125;, error message: &#123;&#125;\", to, e.getMessage())); return new EmailStatus(to, subject, text).error(e.getMessage()); &#125; &#125;&#125; Membuat component 1234567891011@Componentpublic class EmailHtmlSender&#123; @Autowired private EmailSender mailSender; @Autowired private TemplateEngine templateEngine; public EmailStatus send(String to, String subject, String templateName, Context context) &#123; String body = templateEngine.process(templateName, context); return mailSender.sendHtml(to, subject, body); &#125;&#125; Membuat html 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;title th:remove=\"all\"&gt;Order Confirmation&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt; &lt;h2 th:text=\"$&#123;title&#125;\"&gt;title&lt;/h2&gt; &lt;p th:text=\"$&#123;description&#125;\"&gt;&lt;/p&gt; &lt;p&gt; &lt;a th:href=\"@&#123;http://localhost:8080/activate(email=$&#123;email&#125;)&#125;\"&gt;Verification Link&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; Membuat service 1234public interface EmailService&#123; EmailStatus sendEmail(RegisterForm form);&#125; Membuat service impl 123456789101112131415161718@Servicepublic class EmailServiceImpl implements EmailService&#123; @Autowired public EmailHtmlSender emailHtmlSender; @Override public EmailStatus sendEmail(RegisterForm form)&#123; Context context = new Context(); context.setVariable(\"title\", \"Clorus Email Verification\"); context.setVariable(\"description\", \"To Verify your clorus account please click link below \"); context.setVariable(\"email\",form.getEmail()); EmailStatus emailStatus = emailHtmlSender.send(form.getEmail(), \"Clorus Email Verification\", \"mail\", context); return emailStatus; &#125;&#125; Membuat controller 12345678@PreAuthorize(\"permitAll()\") @RequestMapping(method = RequestMethod.POST,value = \"/register\") public ResponseData&lt;Object&gt; register(@RequestBody @Valid RegisterForm form)throws Exception&#123; ResponseData&lt;Object&gt; responseData = new ResponseData&lt;&gt;(); userService.register(form); responseData.setData(emailService.sendEmail(form)); return responseData; &#125; Verifikasi Email Membuat controller 123456789101112131415161718192021public class UserThymeleafController&#123; @Autowired private UserRepository userRepository; @PreAuthorize(\"permitAll()\") @RequestMapping(\"/activate\") public String activate (@RequestParam (value=\"email\")String email,Model model)&#123; User user = userRepository.findByEmail(email); model.addAttribute(\"email\",user.getEmail()); Logger logger = LoggerFactory.getLogger(this.getClass()); logger.info(\"\\n\\n Email yang dikirim yaitu\\n\\n\\n\", user.getEmail()); user.setEnabled(true); userRepository.save(user); return \"/activate\"; &#125;&#125; Membuat html 123456789101112&lt;!DOCTYPE html&gt;&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;title &gt;Aktivasi Akun&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt; &lt;p&gt;Selamat &lt;span th:text=\"$&#123;email&#125;\"&gt;&lt;/span&gt;, anda telah berhasil melakukan aktivasi akun. Silahkan nikmati layanan kami.&lt;/p&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Spring Cloud Netfix Eureka as Discovery Service","slug":"pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/","link":"","permalink":"http://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/","excerpt":"","text":"Eureka adalah discovery service yang didevelop oleh netfix. Discovery service sendiri berfungsi untuk menampung data semua service yang ada di microservice. Discovery service juga dapat mempermudah komunikasi antar service yang berdiri di atasnya. Implement Eureka Server Tambahkan dependency spring-cloud-eureka-server Tambahkan anotasi @EnableEurekaServer pada main class Tambahkan konfigurasi eureka service (application.yml)12345678910111213spring: application: name: eureka-serviceserver: port: 8761eureka: client: register-with-eureka: false fetch-registry: false server: waitTimeInMsWhenSyncEmpty: 0 Implement Eureka Client Tambahkan dependency spring-cloud-starter-eureka Tambahkan anotasi @EnableDiscoveryClient pada main class Tambahkan konfigurasi eureka server (bootstrap.yml)123456789spring: application: name: eureka-clienteureka: client: service-url: defaultZone: http://localhost:8761/eurekaserver: port: 8002 Komunikasi Data antar Eureka ClientKita misalkan terdapat 2 eureka client, client pertama(spring.application.name=eureka-client) berjalan di port 8002, sendangkan client kedua(spring.application.name=other-eureka-client) berjalan di port 8003. Client kedua ingin mengambil API dari client pertama menggunakan eureka server.Berikut contoh kode untuk komunikasi antar client. Controller pada client pertama 12345678@RestControllerpublic class SimpleController &#123; @RequestMapping(\"/api/halo\") public String halo ()&#123; return \"Halo ini dari Client Satu\"; &#125;&#125; Konfigurasi RestTemplate pada client kedua 123456789@Configurationpublic class SimpleConfig &#123; @Bean @LoadBalanced RestTemplate restTemplate()&#123; return new RestTemplate(); &#125;&#125; Controller pada client kedua 123456789@RestControllerpublic class SImpleController &#123; @Autowired private RestTemplate restTemplate; @RequestMapping(\"/api/halo\") public String halo()&#123; return restTemplate.getForObject(\"http://eureka-client/api/halo\",String.class); &#125;&#125; Bisa dilihat pada controller client kedua mengambil API dari client pertama menggunakan RestTemplate dengan tidak mengghardcode url APInya, tetapi hanya mencantumkan spring.application.name dari client pertama. Dan data dari API tersebut kemudian disimpan dan dikembalikan dalam tipe data String.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Spring Config Service Security","slug":"pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security","date":"un22fin22","updated":"un22fin22","comments":true,"path":"2017/08/15/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security/","link":"","permalink":"http://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security/","excerpt":"","text":"Konfigurasi Config Server Tambahkan dependency Spring Security Tambahkan username dan password1234security: user: name: username password: pass Konfigurasi Config Client Tambahkan username dan password12345spring: cloud: config: username: username password: pass","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Config Service Refresh Scope and Health Check","slug":"pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2017/08/14/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check/","link":"","permalink":"http://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check/","excerpt":"","text":"Refresh Scope memungkinkan kita untuk mengupdate API yang berisi data konfigurasi pada konfig service tanpa redeploy aplikasi client dan server. Sehingga data yang di dapatkan aplikasi client akan selalu up to date. Konfigurasi Config client. Tambahkan anotasi @RefreshScope pada class yang membutuhkan data dari file konfigurasi Tambahkan dependency Spring Actuator Disable Security default (bootstrap.yml) 123management: security: enabled: false Enable username &amp; password to secure client app(bootstrap.yml)Sebelumnya anda harus menambahkan dependency Spring Security. 1234security: user: name: usernameusr password: passwordusr Untuk merefresh kofigurasi gunakan endpoint http://localhost:PORT/refresh atau dapat mengunakan curl sperti : 1curl -x POST localhost:8080/refresh Health CheckUntuk melihat keadaan config service gunakan endpoint localhost:8080/health","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Integrating Backend to Config Service","slug":"pemrograman/spring/microservice/config-service/5-Config-Service-Cient","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Cient/","link":"","permalink":"http://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Cient/","excerpt":"","text":"Tambahkan Dependency spring-cloud-starter-config Konfigurasi config server uri pada src/main/resource/bootstrap.yml1234spring: cloud: config: uri: http://localhost:10003","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Config Service Encryption Decryption","slug":"pemrograman/spring/microservice/config-service/6-Config-Service-Encryption-Decryption","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2017/08/14/pemrograman/spring/microservice/config-service/6-Config-Service-Encryption-Decryption/","link":"","permalink":"http://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/6-Config-Service-Encryption-Decryption/","excerpt":"","text":"Saat client mengambil konfigurasi dari config service secara default semua data tidak terenkripsi. Sehingga data data credential seperti password dan lain lain dapat langsung diketahui apabila telah mendapatkan file konfigurasinya. Untuk mengurangi bocornya data ada baiknya data credential tersebut kita enkripsi. Spring Cloud Config Server mensupport enkripsi dan dekripsi. Untuk menggunakannya ikuti langkah langkah berikut : Download Java Criptography Enxtension (JCE) Replace fIle konfigurasi telah ada pada desktop kita dengan file JCE yang telah di download Konfigurasi encrypt key (resource/bootstrap.yml) 12encrypt: key: abcdef Encrypt key akan menentukan hasil dari enkripsi dan kunci untuk mendekrip. Konfig value yang terenkripsi agar tetap terenkripsi (resource/bootstrap.yml) 123456spring: cloud: config: server: encrypt: enabled: false Tambahkan encrypt key pada aplikasi client agar dapat mendekip value () 12encypt: key: abcdef Jalankan program Untuk mengenkripsi, lakukan POST ke localhost:8080/encrypt dengan memasukkan data yang ingin di encrypt pada Body HTTP. Semisal kita ingin mengekripsi password dengan value ciazhar123. Maka masukkan password tersebut ke dalam Body HTTP, lalu POST. Dapat menggunakan curl untuk mempermudah : 1curl localhost:8080/encrypt -d value Selanjutnya kita akan mendapatkan response berupa hasil enkripsi yang dapat kita gunakan untuk mereplace data kita dengan hasil enkripsi tersebut. Hasil enkripsi tersebut dapat dipasang dengan cara seperti ini : 1password : &#123;cipher&#125;1n1p455w0rd3nkr1ps1 Untuk mendekripsi, lakukan POST ke localhost:8080/decrypt dengan memasukkan data yang ingin di decrypt pada Body HTTP.Dapat menggunakan curl untuk mempermudah : 1curl localhost:8080/decrypt -d value","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Config Service Git Repository","slug":"pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2017/08/05/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository/","link":"","permalink":"http://ciazhar.github.io/2017/08/05/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository/","excerpt":"","text":"Config Service Git RepositoryPada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam vault server. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam git repository. Sebelumnya push konfigurasi anda ke github. Sampel konfigurasinya dapat dilihat di https://github.com/ciazhar/clorus-config-repository Pada Spring Initializr tambahkan dependency Spring Cloud Config Server dan Spring Cloud Eureka Client Tambahkan anotasi @EnableConfigServer pada main class Setting application name pada file bootstrap.yml 123spring: application: name: config-service Setting git repository uri 123456789101112spring: cloud: config: server: git: uri: https://github.com/ciazhar/clorus-config-repository.git username: ciazhar password: ******** searchPaths: 'config, config/&#123;application&#125;' cloneOnStart: true basedir: 'target/config' bootstrap: true Tambahkan anotasi @EnableEurekaClient pada main class, agar dapat terdaftar sebagai client eureka server.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Config Service Vault Server","slug":"pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/07/28/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server/","link":"","permalink":"http://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server/","excerpt":"","text":"Membuat config service vaultPada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam file system atau dalam project. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam vault server. Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.(https://www.vaultproject.io/intro/index.html) Apabila anda belum menginstal vault server, anda dapat menginstalnya menggunakan tutorial berikut : http://discoposse.com/2016/11/04/installing-hashicorp-vault-on-ubuntu16-04/ Jalankan vault server1vault server -dev Secara default vault server akan berjalan di localhost port 8200. Konfigurasi vault address 1set VAULT_ADDR=http://127.0.0.1:8200 Tulis konfigurasi 1vault write secret/myapp foo=bar bam=baz Baca konfigurasi 1vault write secret/myapp foo=bar bam=baz Buat project spring + dependency spring cloud config Tambahkan @EnableConfigServer pada main class Ubah Konfigurasi 12345#ubah portserver.port=8888#ubah profileserver.profiles.active=vault Untuk merequest API nya tambahkan parameter pada HTTP Header dengan nama X-Config-Token dengan value dari root token yang ada pada CLI vault server.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Config Service File System","slug":"pemrograman/spring/microservice/config-service/2.Config-Service-File-System","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/07/28/pemrograman/spring/microservice/config-service/2.Config-Service-File-System/","link":"","permalink":"http://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/2.Config-Service-File-System/","excerpt":"","text":"Membuat Config Service yang berisi konfigurasi 1 service Buat project dengan spring initializr. Menambahkan dependency spring-cloud-config-server. Menambah anotasi @EnableConfigServer pada main class. Konfigurasi config service (resource/application.properties) 12345678# Konfigurasi Portserver.port=8080# Memberitahu bahwa file konfigurasi berada dalam 1 projectspring.profiles.active=native# json pretty printspring.jackson.serialization.indent-output=true Membuat File KonfigurasiSelanjutnya kita akan membuat beberapa file konfigurasi. Semisal kita akan membuat konfigurasi database dan konfigurasi messaging. Di setiap konfigurasi tersebut kita juga dapat menambahkan profile, semisal untuk database kita dapat membuat untuk profile development dan profile qa. File file konfigurasi nantinya tersebut akan disimpan dalam di folder resource/config. Contoh Konfigurasi Database (resource/config/db.properties)1234driverClassName=com.mysql.jdbc.Driverurl=mysql:jdbc://localhost:3306/testusername=rootpassword=password Contoh Konfigurasi Database Dev (resource/config/db-dev.properties)1234driverClassName=com.mysql.jdbc.Driverurl=mysql:jdbc://localhost:3306/testusername=rootpassword=password Contoh Konfigurasi Database QA (resource/config/db-qa.properties)1234driverClassName=com.mysql.jdbc.Driverurl=mysql:jdbc://localhost:3306/testusername=rootpassword=password Contoh Konfigurasi Messaging (resource/config/mq.properties)123brokeurl=localhost:5672username=guestpassword=guest Kemudian coba jalankan config service. Spring Cloud Config menyediakan API untuk konfigurasi yang disimpan olehnya. Untuk mengaksesnya dapat menggunakan endpoint berikut :1http://localhost:8080/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125; Keterangan : name berarti nama dari servicenya. profile berarti profile dari servicenya. Biasanya setiap service memiliki beberapa profile seperti dev, staging, deploy. label berati label tambahan Contoh enpoint yang dapat di akses :1234http://localhost:8080/db/defaulthttp://localhost:8080/db/devhttp://localhost:8080/db/qahttp://localhost:8080/mq/default Membuat Config Service yang berisi lebih dari konfigurasi 1 serviceSetelah kita membuat config service dengan 1 konfigurasi service, kita akan coba menambahkan beberapa konfigurasi aplikasi pada config service kita. Karena pada dasarnya config service ini yang akan menghandle file file konfigurasi dari bebagai microservice. Buat File konfigurasiContoh Konfigurasi aplikasi 1 Default(resource/app1/myapp.properties)12foo=barbar=bam Contoh Konfigurasi aplikasi 1 untuk Developer Stage(resource/app1/myapp-dev.properties)12foo=bardevbar=bam Contoh Konfigurasi aplikasi 2 Default (resource/app2/myapp.properties)12foo=barbar=bam Tambahkan konfigurasi untuk multiple aplikasi menggunakan spring.cloud.config.server.native.search-locations: Berikut adalah contohnya :1spring.cloud.config.server.native.search-locations:classpath:/config, classpath:/app1, classpath:/app2 Nama folder konfigurasi ditulis setelah classpath:/ . Dalam konteks ini classpath berada di direktori src/main/resource. Untuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :1234http://localhost:8080/myapp/defaulthttp://localhost:8080/myapp/devhttp://localhost:8080/myapp-default.jsonhttp://localhost:8080/myapp-dev.json Override value konfigurasiKita dapat mengoverride konfgurasi yang identik, semisal untuk file resource/app1/myapp.properties dan resource/app2/myapp.properties. Kedua file konfigurasi tersebut sama-sama memiliki parameter bernama foo. Apabila anda ingin mengoverride value dari foo tersebut, dapat dilakukan dengan beberapa langkah berikut. Tambahkan konfigurasi untuk override konfigurasi1spring.cloud.config.server.overrides.&lt;nama-parameter&gt;=&lt;value&gt; Pada script diatas ada 2 nilai yang harus diisi yaitu nama-parameter yang akan di override dan value dari parameter tersebut Untuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :123http://localhost:8080/myapp/defaulthttp://localhost:8080/myapp-default.jsonhttp://localhost:8080/myapp-default.yml","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Spring Config Service","slug":"pemrograman/spring/microservice/config-service/1.GS-Config-Service","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2017/07/22/pemrograman/spring/microservice/config-service/1.GS-Config-Service/","link":"","permalink":"http://ciazhar.github.io/2017/07/22/pemrograman/spring/microservice/config-service/1.GS-Config-Service/","excerpt":"","text":"Spring Config service adalah sebuah service yang digunakan untuk menyimpan, mengakses, dan mengatur konfigurasi dari setiap service. Spring Config Service juga dapat mensupport version control untuk setiap file file konfigurasinya. Spring Config ServiceSpring Config Service memiliki beberapa fungsi yaitu : View/Fetch Configuration (json / yml) Encrypt &amp; Decrypt Value Refresh Scope Health Check","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Microservice dengan Spring Cloud","slug":"pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud","date":"un00fin00","updated":"un66fin66","comments":true,"path":"2017/05/28/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud/","link":"","permalink":"http://ciazhar.github.io/2017/05/28/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud/","excerpt":"","text":"Komponen Komponen Microservice Discovery Service (Eureka) Config Service API Gateway Authorization Service Image Service Monitoring Circuit Breaker (Hystrix) Inteligent routing (Zuul) Load Balancing (Ribbon)","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Database Mirgation dengan FlywayDB","slug":"pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB","date":"un00fin00","updated":"un44fin44","comments":true,"path":"2017/05/28/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB/","link":"","permalink":"http://ciazhar.github.io/2017/05/28/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB/","excerpt":"","text":"jalankan seperti biasa projectnya maka akan di generate folder resource/db/migration koneksikan dengan database agar model dapat di ubah menjadi tabel show create table nama_tabel copy trus paste ke file sql jalankan dan sukses","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Single Signed On dengan Spring Security","slug":"pemrograman/spring/security/6-SSO-dengan-Spring-Security","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2017/05/27/pemrograman/spring/security/6-SSO-dengan-Spring-Security/","link":"","permalink":"http://ciazhar.github.io/2017/05/27/pemrograman/spring/security/6-SSO-dengan-Spring-Security/","excerpt":"","text":"Aplikasi Authorization Sever dengan Spring Security#Setup Development Environment JDK 1.8 Tomcat Sever MySQL #Teknologi yang digunakan Spring Boot Spring Security AngularJS #Setup Project Buka browser masukkan url 1http://start.spring.io/ Masukkan data, sesuaikan dengan dependency yang dibutuhkan(web, security,oauth2) lalu download Add project ke text editor Note :Pada Project tersebut terdapat 3 buah file utama yaitu : pom.xml (konfigurasi maven) application.properties (konfigurasi database) Application.java (main class) #Simple Oauth Facebook Konfigurasi Oauth (application.yml)Note : application.properties diganti application.yml 123456789101112security: oauth2: client: clientId: 233668646673605 clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d accessTokenUri: https://graph.facebook.com/oauth/access_token userAuthorizationUri: https://www.facebook.com/dialog/oauth tokenName: oauth_token authenticationScheme: query clientAuthenticationScheme: form resource: userInfoUri: https://graph.facebook.com/me Kasih anotasi @EnableOAuth2Sso (Aplikasi.java) 1234567@EnableOAuth2Sso@SpringBootApplicationpublic class Aplikasi &#123; public static void main(String[] args) &#123; SpringApplication.run(Aplikasi.class, args); &#125;&#125; Bikin UI jika otorisari succes(resource/static/index.html) 12345678910111213141516171819&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;title&gt;Demo&lt;/title&gt; &lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt; &lt;base href=&quot;/&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/webjars/bootstrap/css/bootstrap.min.css&quot; /&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/webjars/jquery/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/webjars/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;SSO sukses&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; Bikin UI untuk login Bikin UI (resource/static/index.html) 12345678910111213141516171819202122232425...&lt;body ng-app=&quot;app&quot; ng-controller=&quot;home as home&quot;&gt; &lt;h1&gt;Login&lt;/h1&gt; &lt;div class=&quot;container&quot; ng-show=&quot;!home.authenticated&quot;&gt; With Facebook: &lt;a href=&quot;/login&quot;&gt;click here&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;container&quot; ng-show=&quot;home.authenticated&quot;&gt; &lt;h1&gt;SSO berhasil&lt;/h1&gt; Logged in as: &lt;span ng-bind=&quot;home.user&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/webjars/angularjs/angular.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; angular.module(&quot;app&quot;, []).controller(&quot;home&quot;, function($http) &#123; var self = this; $http.get(&quot;/user&quot;).success(function(data) &#123; self.user = data.userAuthentication.details.name; self.authenticated = true; &#125;).error(function() &#123; self.user = &quot;N/A&quot;; self.authenticated = false; &#125;); &#125;); &lt;/script&gt;&lt;/body&gt;... Bikin RestController(java/domain/controllers/IndexController.java) 1234567@RestControllerpublic class IndexController &#123; @RequestMapping(&quot;/user&quot;) public Principal user(Principal principal) &#123; return principal; &#125;&#125; Bikin Konfigurasi Security(java/domain/config/KonfigurasiSecurity.java) 12345678910@Configurable@EnableOAuth2Sso@EnableWebSecuritypublic class KonfigurasiSecurity extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.antMatcher(&quot;/**&quot;).authorizeRequests().antMatchers(&quot;/&quot;, &quot;/login**&quot;, &quot;/webjars/**&quot;).permitAll().anyRequest() .authenticated(); &#125;&#125; #Pretty print JSON Konfigurasi YAML (resources/application.yml)1234spring: jackson: serialization: INDENT_OUTPUT: true #Custom Logout Konfigurasi client Side (resources/static/index.html) 12345678910111213141516angular.module(&quot;app&quot;, [])....controller(&quot;home&quot;, function($http, $location) &#123; var self = this; ... self.logout = function() &#123; $http.post(&apos;/logout&apos;, &#123;&#125;).success(function() &#123; self.authenticated = false; $location.path(&quot;/&quot;); &#125;).error(function(data) &#123; console.log(&quot;Logout failed&quot;) self.authenticated = false; &#125;); &#125;;&#125;); Konfigurasi Server Side (java/domain/config/KonfigurasiSecurity.java) 1234.and().logout().logoutSuccessUrl(&quot;/&quot;).permitAll().and().csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()); #Memisahkan Otorisasi Facebook dari Spring Security Mengubah anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client (java/domain/config/KonfigurasiSecurity.java) Sejatinya adalah aplikasi yang telah kita buat tadi berdiri di persis di atas Spring Security. Hal ini dikarenakan kita menggunakan anotasi @EnableOAuth2Sso. Anotasi tersebut sendiri terdiri dari 2 fitur yaitu OAuth2 client dan Oauth2 authentification. Untuk OAuth2 client dia dapat berinteraksi dengan resource OAuth2 yang disediakan oleh Authorization Server (dalam konteks ini facebook Authorization Server). Sedangkan OAuth2 authentification dia berfungsi untuk menyelaraskan aplikasi kita dengan REST milik Spring Security Jadi ketika 2 fitur itu digunakan untuk SSO ke facebook saja, maka kita hanya dapat SSO ke facebook saja Oleh karena itu kita akan mengganti anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client 123456@Configurable@EnableOAuth2Client@EnableWebSecuritypublic class KonfigurasiSecurity extends WebSecurityConfigurerAdapter &#123;&#125; Membuat Filter authentification(java/domain/config/KonfigurasiSecurity.java) 12345678910111213141516171819202122232425262728293031323334@AutowiredOAuth2ClientContext oauth2ClientContext;///Bean untuk memberitahu filter tentang registrasi client dengan facebook@Bean@ConfigurationProperties(&quot;facebook.client&quot;)public AuthorizationCodeResourceDetails facebook() &#123; return new AuthorizationCodeResourceDetails();&#125;///Bean untuk memberitahu filter tentang dimana user end point di facebook@Bean@ConfigurationProperties(&quot;facebook.resource&quot;)public ResourceServerProperties facebookResource() &#123; return new ResourceServerProperties();&#125;private Filter ssoFilter() &#123; OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/facebook&quot;); OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext); facebookFilter.setRestTemplate(facebookTemplate); UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId()); tokenServices.setRestTemplate(facebookTemplate); facebookFilter.setTokenServices(tokenServices); return facebookFilter;&#125;@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.antMatcher(&quot;/**&quot;) ... .addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class);&#125; Mengubah konfigurasi OAuth2(resources/application.yml) 1234567891011121314facebook: client: clientId: 233668646673605 clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d accessTokenUri: https://graph.facebook.com/oauth/access_token userAuthorizationUri: https://www.facebook.com/dialog/oauth tokenName: oauth_token authenticationScheme: query clientAuthenticationScheme: form resource: userInfoUri: https://graph.facebook.com/me logging: level: org.springframework.security: DEBUG Ganti URL pada UI(resources/static/index.html) 12345&lt;div class=&quot;container&quot; ng-show=&quot;!home.authenticated&quot;&gt; &lt;div&gt; With Facebook: &lt;a href=&quot;/login/facebook&quot;&gt;click here&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; Buat Konfigurasi untuk Redirect(java/domain/config/KonfigurasiSecurity.java) 1234567@Beanpublic FilterRegistrationBean oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) &#123; FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(filter); registration.setOrder(-100); return registration;&#125; #Tambah Authentification untuk github Edit UI (resources/static/index.html) 1With Github: &lt;a href=&quot;/login/github&quot;&gt;click here&lt;/a&gt; Tambah Konfigurasi untuk Github(java/domain/config/KonfigurasiSecurity.java) 1234567891011@Bean@ConfigurationProperties(&quot;github.client&quot;)public AuthorizationCodeResourceDetails github() &#123; return new AuthorizationCodeResourceDetails();&#125;@Bean@ConfigurationProperties(&quot;github.resource&quot;)public ResourceServerProperties githubResource() &#123; return new ResourceServerProperties();&#125; Edit Filter(java/domain/config/KonfigurasiSecurity.java) 1234567891011121314151617181920private Filter ssoFilter() &#123; CompositeFilter filter = new CompositeFilter(); List&lt;Filter&gt; filters = new ArrayList&lt;&gt;(); OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/facebook&quot;); OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext); facebookFilter.setRestTemplate(facebookTemplate); UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId()); tokenServices.setRestTemplate(facebookTemplate); facebookFilter.setTokenServices(tokenServices); filters.add(facebookFilter); OAuth2ClientAuthenticationProcessingFilter githubFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/github&quot;); OAuth2RestTemplate githubTemplate = new OAuth2RestTemplate(github(), oauth2ClientContext); githubFilter.setRestTemplate(githubTemplate); tokenServices = new UserInfoTokenServices(githubResource().getUserInfoUri(), github().getClientId()); tokenServices.setRestTemplate(githubTemplate); githubFilter.setTokenServices(tokenServices); filters.add(githubFilter); filter.setFilters(filters); return filter;&#125; Tambah Konfigurasi OAuth2 Github(resources/application.yml) 123456789github: client: clientId: bd1c0a783ccdd1c9b9e4 clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1 accessTokenUri: https://github.com/login/oauth/access_token userAuthorizationUri: https://github.com/login/oauth/authorize clientAuthenticationScheme: form resource: userInfoUri: https://api.github.com/user #Membuat authorization server Merapikan ssoFilter Note : kita akan membagi menjadi 2 agar terlihat rapi 1234567891011121314151617181920private Filter ssoFilter() &#123; CompositeFilter filter = new CompositeFilter(); List&lt;Filter&gt; filters = new ArrayList&lt;&gt;(); filters.add(ssoFilter(facebook(), &quot;/login/facebook&quot;)); filters.add(ssoFilter(github(), &quot;/login/github&quot;)); filter.setFilters(filters); return filter; &#125;private Filter ssoFilter(ClientResources client, String path) &#123; OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter( path); OAuth2RestTemplate template = new OAuth2RestTemplate(client.getClient(), oauth2ClientContext); filter.setRestTemplate(template); UserInfoTokenServices tokenServices = new UserInfoTokenServices( client.getResource().getUserInfoUri(), client.getClient().getClientId()); tokenServices.setRestTemplate(template); filter.setTokenServices(tokenServices); return filter;&#125; membuat class ClientResources untuk mengatur otorisasi client dan akses resource yang pada tadinya terpisah 12345678910111213141516class ClientResources &#123; @NestedConfigurationProperty private AuthorizationCodeResourceDetails client = new AuthorizationCodeResourceDetails(); @NestedConfigurationProperty private ResourceServerProperties resource = new ResourceServerProperties(); public AuthorizationCodeResourceDetails getClient() &#123; return client; &#125; public ResourceServerProperties getResource() &#123; return resource; &#125;&#125; -","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Melihat data User yang sedang Login menggunakan Spring Security","slug":"pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md","date":"un66fin66","updated":"un11fin11","comments":true,"path":"2017/05/27/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md/","link":"","permalink":"http://ciazhar.github.io/2017/05/27/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md/","excerpt":"","text":"Untuk dapat melihar user yang sedang login dapat menggunakan Authentication yang nilainya akan diinjek oleh spring security. Berikut contoh kodenya :123456789@RestController@RequestMapping(\"api/user\")public class UserController &#123; @RequestMapping(\"/current\") public Authentication currentUser(Authentication authentication)&#123; return authentication; &#125;&#125;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Debugging Spring Security","slug":"pemrograman/spring/security/3-debug-spring-security","date":"un66fin66","updated":"un11fin11","comments":true,"path":"2017/05/27/pemrograman/spring/security/3-debug-spring-security/","link":"","permalink":"http://ciazhar.github.io/2017/05/27/pemrograman/spring/security/3-debug-spring-security/","excerpt":"","text":"Spring security memberikan fasilitas untuk mendebug. Untuk menggunakannya cukup dengan menambahkan anotasi @EnableWebSecurity(debug = true) pada file KonfigurasiSecurity. 123@EnableWebSecurity(debug = true)public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter&#123;&#125; Debug ini hanya disarankan pada tahap development saja.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Otorisasi methode dengan Spring Security","slug":"pemrograman/spring/security/2-otorisasi-method-dengan-spring-security","date":"un66fin66","updated":"un11fin11","comments":true,"path":"2017/05/27/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security/","link":"","permalink":"http://ciazhar.github.io/2017/05/27/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security/","excerpt":"","text":"Require : otorisasi login dengan spring security crud 1234@EnableGlobalMethodSecurity(prePostEnabled = true)public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter&#123;&#125; 123456789101112@RestController@RequestMapping(\"/api/harga\")public class HargaRestController &#123; @Autowired private HargaDao hargaDao; @PreAuthorize(\"hasAuthority('HARGA_EDIT')\") @GetMapping(\"/\") public Page&lt;Harga&gt; daftarHarga(Pageable page)&#123; return hargaDao.findAll(page); &#125;&#125;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Integrasi Spring dan Oauth2 + JWT","slug":"pemrograman/spring/security/5-oauth2-spring","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2017/05/27/pemrograman/spring/security/5-oauth2-spring/","link":"","permalink":"http://ciazhar.github.io/2017/05/27/pemrograman/spring/security/5-oauth2-spring/","excerpt":"","text":"Gambaran UmumAplikasi yang akan kita buat nantinya akan dibagi menjadi beberapa aplikasi kecil dengan fungsinya masing-masing. Diantaranya adalah : Resource Server. Aplikasi ini menyediakan resource yang dibutuhkan oleh user. Authorization Server. Aplikasi ini menyediakan layanan otorisasi. Aplikasi Client. Aplikasi yang dipakai oleh client. Dapat berupa aplikasi web ataupun native. Konfigurasi Resource Server Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml) 123456789 &lt;dependency&gt; &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt; &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt; &lt;version&gt;2.0.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;&lt;/dependency&gt; Buat class KonfigurasiResourceServer (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java) 1234@EnableResourceServerpublic class KonfigurasiResourceServer extends ResourceServerConfigurerAdapter&#123;&#125; override methode untuk authorisasi (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java/ResourceServerConfiguration). 12345@Overridepublic void configure(HttpSecurity http) throws Exception &#123; http.authorizeRequests().anyRequest().authenticated() ;&#125; Konfigurasi JWT 1security.oauth2.resource.jwt.key-uri=http://localhost:10000/oauth/token_key Konfigurasi Authorization Server Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml) 123456789 &lt;dependency&gt; &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt; &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt; &lt;version&gt;2.0.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;&lt;/dependency&gt; setup port (auth-server/src/main/resources/application.properties) 1server.port=10000 setup session cookies(auth-server/src/main/resources/application.properties) 1server.session.cookie.name=AUTHSERVER membuat class KonfigurasiAuthorizationServer (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java) 1234@Configurationpublic class KonfigurasiAuthorizationServer &#123;&#125; Membuat inner class Setup AuthenticationManager 123@Autowired@Qualifier(&quot;authenticationManagerBean&quot;)private AuthenticationManager authenticationManager; Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menyimpan token yang nanti akan di cek kembali 1234567@Overridepublic void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123; endpoints .tokenStore(new InMemoryTokenStore()) .authenticationManager(authenticationManager);&#125; Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menentukan role apa saja yang dapat mendapat mengakses check token 1234@Overridepublic void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception &#123; oauthServer.checkTokenAccess(&quot;hasRole(&apos;CLIENT&apos;)&quot;);&#125; Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berisi list role client berasarkan grant tye 123456789101112131415161718192021222324252627282930313233@Overridepublic void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123; clients .inMemory() .withClient(&quot;clientauthcode&quot;) .secret(&quot;123456&quot;) .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;refresh_token&quot;) .authorities(&quot;CLIENT&quot;) .scopes(&quot;read&quot;,&quot;write&quot;) .resourceIds(RESOURCE_ID) .and() .withClient(&quot;clientcred&quot;) .secret(&quot;123456&quot;) .authorizedGrantTypes(&quot;client_credentials&quot;) .scopes(&quot;trust&quot;) .resourceIds(RESOURCE_ID) .and() .withClient(&quot;clientapp&quot;) .secret(&quot;123456&quot;) .authorizedGrantTypes(&quot;password&quot;) .scopes(&quot;read&quot;,&quot;write&quot;) .resourceIds(RESOURCE_ID) .and() .withClient(&quot;jsclient&quot;) .secret(&quot;123456&quot;) .authorizedGrantTypes(&quot;implicit&quot;) .authorities(&quot;CLIENT&quot;) .scopes(&quot;read&quot;,&quot;write&quot;) .resourceIds(RESOURCE_ID) .redirectUris(&quot;http://localhost:20000/implicit-client&quot;) .accessTokenValiditySeconds(60* 60 *24) .autoApprove(true);&#125; Konfigurasi Security (auth-server/src/main/java/domain/config/KonfigurasiSecurity) 12345@Override @Bean public AuthenticationManager authenticationManagerBean() throws Exception &#123; return super.authenticationManagerBean(); &#125; Flow untuk masing masing role clintPerlu diketahui authorization server akan jalan di port 10000 dan resource server akan jalan di port 8080. OAuth 2 sendiri menyediakan 4 role yaitu : Authorization Code (Akses yang dalam mendapatkan resource memerlukan kode) Username Password Client Credential (Akses yang memungkinkan client tidak perlu login untuk mendapatkan akses) Client Impicit (Akses yang biasanya digunakan untuk mendapatkan resource berupa js) Authorization CodeKarena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url 1http://localhost:10000/oauth/authorize?client_id=clientauthcode&amp;response_type=code&amp;redirect_uri=http://localhost:8080/api/halo Note : url tersebut akan diproses oleh auth server (http://localhost:10000/oauth/authorize) dengan parameter client_id yaitu clientauthcode, response_type berupa code dan ingin request ke http://localhost:8080/api/halo Kita akan langsung di redirect ke http://localhost:10000/login. Kita diminta untuk memasukkan otorisasi login Lalu akan muncul form approval dengan scope read dan write, untuk approval ini dapat dikonfigurasi agar tidak tampil atau otomatis authorize. Lalu akan muncul url sebagai berikut 1http://localhost:8080/api/halo?code=Ixd8e Kemudian kita ambil code tersebut Lalu ditukarkan kode tersebut dengan access token dengan cara mengakses kembali ke auth server dengan mencantumkan Methode HTTP berupa POST client_id berupa clientauthcode dan secret 123456 Url berupa http://localhost:10000/oauth/token Header berupa application/json data yaitu: grant_type berupa authorization_code code berupa Ixd8e redirect_uri berupa http://localhost:8080/api/halo Setelah itu kita akan mendapatkan data sebagai berikut : access_token : blablabla token_type : bearer refresh_token : baba expires_in : 43199 scope : read,write Lalu akses ke resource server dengan menambahkan access token yang telah kita dapatkan tadi dengan url http://localhost:8080/api/halo?access_token=blablabla Selamat anda sudah dapat mengakses resource. Sebenarnya sebelum token mendapatkan resource tersebut resource server melakukan pengecekan ke authorization server terhadap acces token tadi apakah valid atau tidak.Namun perlu diketahui bahwa saat ini kedua aplikasi berjalan di port yang berbeda (auth server port 10000, dan resource server di port 8080) sehingga tidak dapat sharing token via memory.Solusinya adalah : Token tadi akan disimpan ke database menggunakan jdbc token store oleh auth server. Lalu resource server akan diarahkan ke database tersebut. Tetapi ada kalanya resource server tidak dapat mendapatkan akses ke database. Menggunakan RemoteTokenServices yang ada pada setting KonfigurasiResourceServer 12345678910@Overridepublic void configure(ResourceServerSecurityConfigurer resources) &#123; RemoteTokenServices tokenService = new RemoteTokenServices(); tokenService.setClientId(&quot;clientauthcode&quot;); tokenService.setClientSecret(&quot;123456&quot;); tokenService.setCheckTokenEndpointUrl(&quot;http://localhost:10000/oauth/check_token&quot;); resources .resourceId(RESOURCE_ID) .tokenServices(tokenService);&#125; resource server akan mengarahkan ke url http://localhost:10000/oauth/check_token dengan menambahkan client id berupa clientauthcode, secret berupa 123456 dan access_token menggunakn methode GET. sehingga resource server mendapat data sebagai berikut : rid : belajar exp : 14441 username : endy authorities : [ROLE_OPERATOR],[ROLE_SUPERVISOR] client_id : clientauthcode scope : read,writedari sini resource server tahu role dari user tersebut dan dapat memutuskan user tersebut dapat mengakses resource tersebut atau tidak Username Password Kita akses auth server dengan mencantumkan Methode HTTP berupa POST client_id berupa clientapp dan secret 123456 Url berupa http://localhost:10000/oauth/token Header berupa application/json data yaitu: client_id berupa clientapp grant_type berupa password username berupa endy password berupa 123 Setelah itu kita akan mendapatkan data sebagai berikut : access_token : blablabla token_type : bearer expires_in : 43199 scope : read,write Kemudian Kita akses auth server dengan mencantumkan Methode HTTP berupa GET client_id berupa clientapp dan secret 123456 dan authorization header Bearer blablabla Url berupa http://localhost:8080/api/halo Header berupa application/json Selamat anda sudah dapat mengakses resource. Client Credential Kita akses auth server dengan mencantumkan Methode HTTP berupa POST client_id berupa clientcred dan secret 123456 Url berupa http://localhost:10000/oauth/token Header berupa application/json data yaitu: client_id berupa clientcred grant_type berupa client_credentials Setelah itu kita akan mendapatkan data sebagai berikut : access_token : blablabla token_type : bearer expires_in : 43199 scope : read,write Kemudian Kita akses auth server dengan mencantumkan Methode HTTP berupa GET client_id berupa clientcred dan secret 123456 dan authorization header Bearer blablabla Url berupa http://localhost:8080/api/halo Header berupa application/json data yaitu: client_id berupa clientcred Perlu diketahui karena client cred ini tidak menggunakan username dan password maka dia tidak dapat digunakan dalam aplikasi ini karena resource server telah kita setting hanya untuk menerima authentifikasi dari user dengan role operator. Implicit Client Karena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url 1http://localhost:10000/oauth/authorize?client_id=jsclient&amp;response_type=token&amp;redirect_uri=http://localhost:2000/implicit-client Note : url tersebut akan diproses oleh auth server (http://localhost:10000/oauth/authorize) dengan parameter client_id yaitu jsclient, response_type berupa token dan ingin request ke http://localhost:2000/implicit-client Kita akan langsung di redirect ke http://localhost:10000/login. Kita diminta untuk memasukkan otorisasi login Selanjutnya kita akan mendapatkan url http://localhost:2000/implicit-client/#access_token=blabla&amp;token_type=bearer Kemudian Kita akses auth server dengan mencantumkan Methode HTTP berupa GETauthorization header Bearer blablabla Url berupa http://localhost:8080/api/halo Header berupa application/json Mendapatkan Informasi User Pertama class buat controller(resource-server/src/main/java/domain/controller/InfoController) 12345@RestController@EnableResourceServerpublic class InfoController&#123;&#125; Buat methode untuk mengakses info user 1234@RequestMapping(&quot;/userinfo&quot;)public Principal user info (Principal principal)&#123; return principal;&#125; Untuk mengaksesnya kita login dulu dengan menggunakan grant type clientauthcode sampai kita mendapatkan access tokenya Setelah mendapatkanya masukkan url http://localhost:8080/userinfo?access_token=blabla Membuat Aplikasi Client Auhtorization CodePertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.Step by Step nya adalah sebagai berikut : Download Setup projek di http://start.spring.io Isi projek metadata berupa : artifact id : groupId : Isi dependency yang dubutuhkan berupa : web thymeleaf Download lalu pindahkan ke text editor Kita coba bikin Controller sebagi resources (client-authcode/src/main/java/domain/controller/InfoController) 12345@Controllerpublic class InfoController &#123;&#125; Kita bikin methode untuk di proses ke user. Methode ini akan mengembalikan waktu sekarang menggunakan variabel waktu. methode ini dapat diakses di url /halo.(client-authcode/src/main/java/domain/controller/InfoController) 1234@RequestMapping(&quot;/info&quot;)public void info(Model m)&#123; m.addAttribute(&quot;waktu&quot;, new Date().toString());&#125; Kita bikin UI untuk mengeluarkan informasi dari methode halo yang telah buat tadi.(client-authcode/src/main/resources/templates/halo.html) 123456789&lt;html&gt; &lt;head&gt; &lt;title&gt;Halo Spring Boot&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Halo Spring Boot&lt;/h1&gt; &lt;h2&gt;Waktu saat ini : &lt;span th:text=&quot;$&#123;waktu&#125;&quot;&gt;&lt;/span&gt;&lt;/h2&gt; &lt;/body&gt;&lt;/html&gt; Proteksi Client Authorization Code Dengan Spring Security Lalu coba kita proteksi Resource Server kita menggunakan Spring Security dengan menambahkan dependency di pom.xml. (client-authcode/pom.xml) 123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt; &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt; &lt;version&gt;2.0.7.RELEASE&lt;/version&gt;&lt;/dependency&gt; Pada keadaan ini kita akan diminta otorisasi jika kita mengakses di browser dengan username : user dan password yang ada pada CLI. karena tidak efisien mengabaikan otorisasi. Buat class untuk konfigurasi otorisasi (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity) 1234@Configurationpublic class KonfigurasiSecurity extends WebSecurityConfigurerAdapter &#123;&#125; Override methode configure (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity). Methode untuk mengabaikan otorisasi 1234@Overridepublic void configure (WebSecurity web) throws Exception&#123; web.ignoring().anyRequest();&#125; Buat class untuk konfigurasi OAuth Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client). 12345@Configuration@EnableOAuth2Clientpublic class KonfigurasiOauth2Client&#123;&#125; Konfigurasi untuk Oauth2 Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client) 123456789101112131415161718private String urlAuthorization = &quot;http://localhost:10000/oauth/authorize&quot;;private String urlToken = &quot;http://localhost:10000/oauth/token&quot;;@Beanpublic OAuth2RestOperations restOperations(OAuth2ClientContext context)&#123; OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(resource(),context); return restTemplate;&#125;@Beanpublic OAuth2ProtectedResourceDetails resource()&#123; AuthorizationCodeResourceDetails resourceDetails= new AuthorizationCodeResourceDetails(); resourceDetails.setClientId(&quot;clientauthcode&quot;); resourceDetails.setClientSecret(&quot;123456&quot;); resourceDetails.setUserAuthorizationUri(urlAuthorization); resourceDetails.setAccessTokenUri(urlToken); return resourceDetails;&#125; Membuat Controler untuk mengakses api dari resource server 1234567891011@Autowiredprivate OAuth2RestOperations restOperations;private String urlApi = &quot;http://localhost:8080/api/halo&quot;;@RequestMapping(&quot;/api&quot;)@ResponseBodypublic Map&lt;String, Object&gt; api ()&#123; Map&lt;String, Object&gt; hasil = restOperations.getForObject(urlApi, HashMap.class); return hasil;&#125; Tambahkan konfigurasi context path dan server port 12server.port=9090server.context-path=/authcode Keterangan :membuat context-path wajib dikarenakan agar tidak terjadi error saat penyimpanan cookies Membuat Aplikasi Client ImplicitPertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.Step by Step nya adalah sebagai berikut : Download Setup projek di http://start.spring.io Isi projek metadata berupa : artifact id : groupId : Isi dependency yang dubutuhkan berupa : web Download lalu pindahkan ke text editor Setting Server port dan Server Context Path12server.port=7070server.context-path=/implicit Membuat HTML sederhana1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Oauth Client Implicit&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt; &lt;/div&gt;&lt;body&gt; Setup Angular JS tambahkan file angualar js ke project buat file aplikasi js 123var app = angular.module(&apos;ImplicitApp&apos;,[]);app.controller(&apos;DummyController&apos;,function()&#123;)&#125;; include ke html 12345678 &lt;body ng-app=&quot;ImplicitApp&quot;&gt; &lt;div ng-controller=&quot;DummyController&quot;&gt; &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt; &lt;/div&gt; &lt;script src=&quot;js/angular.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/aplikasi.js&quot;&gt;&lt;/script&gt;&lt;/body&gt; test angular js 12345&lt;div ng-controller=&quot;DummyController&quot;&gt; &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt; Masukkan Nama Anda : &lt;input type=&quot;text&quot; ng-model=&quot;nama&quot;&gt;&lt;br&gt; Selamat Datang &#123;&#123;nama&#125;&#125;&lt;/div&gt; Impicit Client angular js 12345678910111213141516171819202122232425262728293031323334353637app.controller(&apos;DummyController&apos;,function($http, $scope, $window, $location)&#123; var urlResourceServer = &quot;http://localhost:8080/api/halo&quot;; var urlAuthServer = &quot;http://localhost:10000/oauth/authorize?client_id=jsclient&amp;response_type=token&quot;; $scope.bukaLoginPage = function () &#123; $window.location.href = urlAuthServer; &#125;; $scope.ambilTokenDariServer = function () &#123; var location = $location.url(); /// ngambil hash yang isinya #access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d&amp;token_type=bearer&amp;expires_in=86399&amp;scope=read%20write console.log(&quot;Location : &quot;+location); var params = location.split(&quot;&amp;&quot;);///jadi array yang isinya [access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d , token_type=bearer , expires_in=86399 , scope=read%20write] console.log(&quot;Param : &quot;+params); var tokenParam = params[0];///ambile param indek ke 0 yaitu access token console.log(&quot;token Param : &quot;+tokenParam); var token = tokenParam.split(&quot;=&quot;)[1]; console.log(&quot;token : &quot;+token); $window.sessionStorage.setItem(&apos;token&apos;,token); &#125;; $scope.requestKeResourceServer = function () &#123; var token = $window.sessionStorage.getItem(&apos;token&apos;); if (!token)&#123; alert(&apos;Belum Login&apos;); return; &#125; $http.get(urlResourceServer+&quot;?access_token=&quot;+token).then( function (response) &#123; $scope.responseDariServer = response.data; &#125;, function (response) &#123; alert(&apos;Error Code&apos;+response.status+&apos;, Error Text : &apos;+response.statusText); &#125; ); &#125;;&#125;); html 1234567891011121314151617&lt;div ng-controller=&quot;DummyController&quot;&gt; &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt; Masukkan Nama Anda : &lt;input type=&quot;text&quot; ng-model=&quot;nama&quot;&gt;&lt;br&gt; Selamat Datang &#123;&#123;nama&#125;&#125; &lt;hr&gt; &lt;button ng-click=&quot;bukaLoginPage()&quot;&gt;Login ke Server&lt;/button&gt; &lt;button ng-click=&quot;ambilTokenDariServer()&quot;&gt;Ambil Token dari Server&lt;/button&gt; &lt;hr&gt; &lt;button ng-click=&quot;requestKeResourceServer()&quot;&gt;Merequest ke Resource Server&lt;/button&gt; &lt;div&gt; &#123;&#123;responseDariServer&#125;&#125; &lt;/div&gt;&lt;/div&gt; NoteUntuk mengatasi masalah CORS pastikan api anda telah mengunakan anotasi @CrossOrigin","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Authorization and Authentification Service","slug":"pemrograman/angular/5-Auth-Service","date":"un66fin66","updated":"un33fin33","comments":true,"path":"2017/05/20/pemrograman/angular/5-Auth-Service/","link":"","permalink":"http://ciazhar.github.io/2017/05/20/pemrograman/angular/5-Auth-Service/","excerpt":"","text":"Membuat service otorisasi Membuat shared module. 1ng g module shared Membuat service auth di dalam shared module 12cd sharedng g service auth Membuat service (auth.service.ts) 12345678910111213141516171819202122232425262728293031323334import &#123; Injectable &#125; from &apos;@angular/core&apos;;@Injectable()export class AuthService &#123; constructor() &#123; &#125; isLogin() : boolean&#123; return localStorage.getItem(&quot;authentification&quot;)!=null; &#125; getUserInfo() : any&#123; return localStorage.getItem(&quot;authentification&quot;); &#125; login(username : string, password : string) : boolean&#123; if(username == &quot;admin&quot; &amp;&amp; password == &quot;123&quot;)&#123; let userObject = &#123; username: &quot;admin&quot;, permissions: [ &quot;TRANSAKSI_VIEW&quot;, &quot;TRANSAKSI_EDIT&quot; ] &#125; localStorage.setItem(&quot;authentification&quot;,JSON.stringify(userObject)); return true; &#125; return false; &#125; logout()&#123; localStorage.removeItem(&quot;authentification&quot;); &#125;&#125; Import auth service (shared.module.ts) 1import &#123; AuthService &#125; from &apos;./auth.service&apos;; Definisikan di ngModule sebagai exports 12345@NgModule(&#123; exports: [ AuthService ]&#125;) Membuat file authguard.ts 1234567891011121314151617181920import &#123; Injectable &#125; from &apos;@angular/core&apos;;import &#123; CanActivate, CanActivateChild &#125; from &apos;@angular/router&apos;;import &#123; AuthService &#125; from &apos;./auth.service&apos;;@Injectable()export class AuthGuard implements CanActivate, CanActivateChild &#123; constructor(private auth : AuthService)&#123;&#125; canActivate() &#123; console.log(&apos;AuthGuard#canActivate called&apos;); return this.auth.isLogin(); &#125; canActivateChild() &#123; console.log(&apos;AuthGuard#canActivateChild called&apos;); return this.canActivate(); &#125;&#125; import shared module (app.module.ts) 12import &#123; AuthService &#125; from &apos;./shared/auth.service&apos;;import &#123; AuthGuard &#125; from &apos;./shared/authguard&apos;; definisikan di ngModule sebagai provider 12345@NgModule(&#123; providers: [ AuthGuard, AuthService ],&#125;) implement ke routing (app.module.ts) 12345const routingAplikasi: Routes = [ &#123; path: &quot;about&quot;, component: AboutComponent, canActivate : [AuthGuard] &#125;, &#123; path: &quot;transaksi&quot;, redirectTo: &quot;/transaksi&quot;, pathMatch: &quot;full&quot;, canActivateChild : [AuthGuard]&#125;, &#123; path: &quot;**&quot;, component: WelcomeComponent &#125;] implement ke routing (transaksi.module.ts) 12345const routingTransaksi : Routes = [ &#123; path: &quot;transaksi/beli&quot;, component: BeliComponent, canActivate : [AuthGuard] &#125;, &#123; path: &quot;transaksi/jual&quot;, component: JualComponent, canActivate : [AuthGuard] &#125;, &#123; path: &quot;transaksi/rekap&quot;, component: RekapComponent &#125;] Mengatur kondisi layout jika belum loginApabila anda ingin membuat suatu menu tidak ditampilkan jika belum login, anda dapat menggunakan fungsi isLogin yang telah kita buat tadi. Anda cukup menyisipkan menu yang tidak ingin ditampilkan diantara tag yang berisi kondisi isLogin. Berikut adalah contoh penggunaannya :1&lt;span *ngIf=\"authService.isLogin()\"&gt; &lt;a routerLink=\"path\"&gt;Menu yang tidak ingin ditampilkan&lt;/a&gt; &lt;/span&gt; Kemudian definisikan service pada konstruktor pada module.ts nya.1constructor(private authService : AuthService) &#123; &#125; Jangan lupa di import AuthService nya Membuat Form Login membuat component login form 12cd sharedng g component login membuat html nya 12345678910&lt;div class=&quot;container&quot;&gt; &lt;form class=&quot;form-signin&quot;&gt; &lt;h2 class=&quot;form-signin-heading&quot;&gt;Please sign in&lt;/h2&gt; &lt;label for=&quot;username&quot; class=&quot;sr-only&quot;&gt;Username&lt;/label&gt; &lt;input [(ngModel)]=&quot;username&quot; type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; required autofocus&gt; &lt;label for=&quot;password&quot; class=&quot;sr-only&quot;&gt;Password&lt;/label&gt; &lt;input [(ngModel)]=&quot;password&quot; type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; required&gt; &lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; (click)=login()&gt;Sign in&lt;/button&gt; &lt;/form&gt;&lt;/div&gt; import shared.module 12import &#123; FormsModule &#125; from &apos;@angular/forms&apos;;import &#123; LoginComponent &#125; from &apos;./login/login.component&apos;; definisikan 123456@NgModule(&#123; imports: [ FormsModule ], declarations: [LoginComponent],&#125;) import app.module 1import &#123; LoginComponent &#125; from &apos;./shared/login/login.component&apos;; definisikan 123@NgModule(&#123; declarations: [LoginComponent],&#125;) routing 1&#123; path: &quot;login&quot;, component: LoginComponent&#125;, method login login.component 123456username : string;password : string;login()&#123; let apa = this.authService.login(this.username, this.password);&#125; constructor 1constructor (private authService : AuthService)&#123;&#125; import 1import &#123; AuthService &#125; from &apos;../auth.service&apos;; Membuat Logout1&lt;li *ngIf=&quot;authService.isLogin()&quot;&gt;&lt;a (click)=&quot;logout()&quot;&gt;Keluar&lt;/a&gt;&lt;/li&gt; 1234logout()&#123; this.authService.logout(); this.router.navigate([&apos;login&apos;]);&#125; 12import &#123; AuthService &#125; from &apos;../shared/auth.service&apos;;import &#123; Router &#125; from &apos;@angular/router&apos;;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Service","slug":"pemrograman/angular/4-Service","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2017/05/09/pemrograman/angular/4-Service/","link":"","permalink":"http://ciazhar.github.io/2017/05/09/pemrograman/angular/4-Service/","excerpt":"","text":"Service ini pada dasarnya digunakan untuk membuat suatu layanan. Untuk membuat service dapat menggunakan perintah sebagai berikut :1ng g service NAMA_SERVICE; Sebagai contoh kita akan membuat service di dalam transaksi. Struktur foldernya akan seperti berikut 12345678910111213141516171819transaksi├── beli│ ├── beli.component.css│ ├── beli.component.html│ ├── beli.component.spec.ts│ └── beli.component.ts├── jual│ ├── jual.component.css│ ├── jual.component.html│ ├── jual.component.spec.ts│ └── jual.component.ts├── rekap│ ├── rekap.component.css│ ├── rekap.component.html│ ├── rekap.component.spec.ts│ └── rekap.component.ts├── transaksi.module.ts├── transaksi.service.spec.ts└── transaksi.service.ts Pada file service.ts terdapat anotasi @Injectable. Anotasi ini berfungsi untuk menandai koding javascript agar langsung injek ketika proses compilasi berlangsung. Buat methode sederhana untuk service(transaksi.service.ts) 12345678getDaftarTransaksi()&#123; let dataTransaksi = [ &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Saldo awal&quot;,nilai : 0, saldo : 0&#125;, &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Tambah&quot;,nilai : 10, saldo : 10&#125;, &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Kurang&quot;,nilai : 5, saldo : 5&#125;, &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Tambah&quot;,nilai : 20, saldo : 25&#125; ];&#125; Buat promise untuk menjembatani apabila service mengalami kegagalan dalam http request.(transaksi.service.ts) 123456789getDaftarTransaksi()&#123; let dataTransaksi = [ &#123;tanggal : \"tanggal\", keterangan : \"Saldo awal\",nilai : 0, saldo : 0&#125;, &#123;tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 10, saldo : 10&#125;, &#123;tanggal : \"tanggal\", keterangan : \"Kurang\",nilai : 5, saldo : 5&#125;, &#123;tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 20, saldo : 25&#125; ]; return Promise.resolve(dataTransaksi);&#125; Import service (transaksi.module.ts) 1import &#123; TransaksiService &#125; from &apos;./transaksi.service&apos; Definisikan pada ngModule sebagai provider (transaksi.module.ts) 12345@NgModule(&#123; provider:[ TransaksiService ] &#125;) Service telah siap digunakan. Kemudian kita akan menggunakanya di component rekap(rekap.component.ts) 12345678910export class RekapComponent implements OnIt &#123; dataTransaksi = []; constructor(private transaksiService : TransaksiService)&#123;&#125; ngOnIt()&#123; this.transaksiService.getDaftarTransaksi().then(hasil =&gt; this.dataTransaksi = hasil) &#125;&#125; Tampilkan hasilnya di UI(rekap.component.html) 1234567891011121314151617181920&lt;table class=&quot;table table-hover table-condensed table-striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Tanggal&lt;/th&gt; &lt;th&gt;Keterangan&lt;/th&gt; &lt;th&gt;Beli&lt;/th&gt; &lt;th&gt;Jual&lt;/th&gt; &lt;th&gt;Saldo&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr *ngFor=&quot;let transaksi of dataTransaksi&quot;&gt; &lt;th&gt;&#123;&#123;transaksi.tanggal&#125;&#125;&lt;/th&gt; &lt;th&gt;&#123;&#123;transaksi.keterangan&#125;&#125;&lt;/th&gt; &lt;th&gt;&#123;&#123;transaksi.nilai&#125;&#125;&lt;/th&gt; &lt;th&gt;&#123;&#123;transaksi.nilai&#125;&#125;&lt;/th&gt; &lt;th&gt;&#123;&#123;transaksi.saldo&#125;&#125;&lt;/th&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Setup Project Hexo","slug":"pemrograman/hexo/1-Setup-Project-Hexo","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/05/07/pemrograman/hexo/1-Setup-Project-Hexo/","link":"","permalink":"http://ciazhar.github.io/2017/05/07/pemrograman/hexo/1-Setup-Project-Hexo/","excerpt":"","text":"Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Hexo","slug":"Pemrograman/Hexo","permalink":"http://ciazhar.github.io/categories/Pemrograman/Hexo/"}],"tags":[]},{"title":"Introduction to Hexo","slug":"pemrograman/hexo/0-Introduction-to-Hexo","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/05/07/pemrograman/hexo/0-Introduction-to-Hexo/","link":"","permalink":"http://ciazhar.github.io/2017/05/07/pemrograman/hexo/0-Introduction-to-Hexo/","excerpt":"","text":"Sekilas tentang HexoHexo merupakan suatu framework untuk mempermudah dalam membuat Blog atau Website probadi. Untuk mengulis konten pada Hexo, dapat menggunakan markdown yang kemudian akan dicompile menjadi html. Untuk Layout dan Design dapat menggunkaan EJS. Roadmap Belajar Hexo Setup Project Hexo Menulis Konten pada Hexo Mengganti Tema pada Hexo Mengkonfigurasi Teman pada Hexo Hosting Hexo ke Github Page","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Hexo","slug":"Pemrograman/Hexo","permalink":"http://ciazhar.github.io/categories/Pemrograman/Hexo/"}],"tags":[]},{"title":"Introduction to Android","slug":"pemrograman/android/0-Introduction-to-Android","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/05/07/pemrograman/android/0-Introduction-to-Android/","link":"","permalink":"http://ciazhar.github.io/2017/05/07/pemrograman/android/0-Introduction-to-Android/","excerpt":"","text":"Sekilas tentang AndroidAndroid merupakan Sistem Operasi untuk mobile. Aplikasi android native sendiri dapat dibangun menggunakan XML(untuk design) dan Java(untuk logic). Pada Tutorial kali ini kita akan coba membuat aplikasi Android native. Roadmap Belajar Android Native Setup Project Android View Java","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Android","slug":"Pemrograman/Android","permalink":"http://ciazhar.github.io/categories/Pemrograman/Android/"}],"tags":[]},{"title":"Routing","slug":"pemrograman/angular/3-Routing","date":"un55fin55","updated":"un55fin55","comments":true,"path":"2017/04/28/pemrograman/angular/3-Routing/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular/3-Routing/","excerpt":"","text":"Laman Web pada umumnya untuk berkomunikasi dengan menggunakan hyperlink. Sementara itu untuk berkomunikasi antar komponen, Angular menggunakan routing. Routing hampir seperti mapping di java. Untuk pergi ke komponen lain, jalurnya harus didefinisikan terlebih dahulu.Routing sendiri berdasarkan letaknya dibedakan menjadi 2 yaitu routing Top Level Component dan routing Component pada Module. Routing Top Level Component Sebelum melakukan routing kita akan buat terlebih dahulu membuat top level componentnya, sebagai contoh kita akan membuat 2 buah component yaitu home dan help. Struktur foldernya akan menjadi seperti ini 12345678910111213141516app/├── app.component.css├── app.component.html├── app.component.spec.ts├── app.component.ts├── app.module.ts├── home│ ├── home.component.css│ ├── home.component.html│ ├── home.component.spec.ts│ └── home.component.ts├── help ├── help.component.css ├── help.component.html ├── help.component.spec.ts └── help.component.ts Selanjunya import RouterModule dan Routes (app.module.ts) 1import &#123; RouterModule, Routes &#125; from '@angular/router'; Selanjutnya routing tiap module (app.module.ts) 1234const routingAplikasi : Routes = [ &#123; path: &quot;help&quot;, component: HelpComponent &#125;, &#123; path: &quot;**&quot;, component: HomeComponent &#125;] Keteranga :Routes diatas melakukan routing untuk HelpComponent ke url help dan WelcomeComponent ke url lainya. Inisialisasi router (app.module.ts) 12345678@NgModule(&#123; .... imports: [ .... RouterModule.forRoot(routingAplikasi) ], ...&#125;) Mapping router ke html menggunakan routerLink 1&lt;li&gt;&lt;a routerLink=\"help\"&gt;Help&lt;/a&gt;&lt;/li&gt; Menambahkan router outlet sebagai tempat keluarnya konten sehabis di routing.(app.component.html) 1&lt;router-outlet&gt;&lt;/router-outlet&gt; Routing Component pada Module import RouterModule dan Routes (transaksi.module.ts) 1import &#123; RouterModule, Routes &#125; from '@angular/router'; buat Routes beserta path (transaksi.module.ts) 12345const routingTransaksi : Routes = [ &#123; path: \"transaksi/beli\", component: BeliComponent &#125;, &#123; path: \"transaksi/jual\", component: JualComponent &#125;, &#123; path: \"transaksi/rekap\", component: RekapComponent &#125;] Inisialisasi Routes (transaksi.module.ts) 12345@NgModule(&#123; .... imports: [ RouterModule.forChild(routingTransaksi) ] import TransaksiComponent(app.module.ts) 1import &#123; TransaksiModule &#125; from &apos;./transaksi/transaksi.module&apos;; tambah path untuk routing module(app.module.ts) 1&#123; path: \"transaksi\", redirectTo: \"/transaksi\", pathMatch: \"full\"&#125; Inisialisasi Routes (app.module.ts) 12345@NgModule(&#123; .... imports: [ TransaksiModule, ]","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Component dan Module","slug":"pemrograman/angular/2-Component-dan-Module","date":"un55fin55","updated":"un55fin55","comments":true,"path":"2017/04/28/pemrograman/angular/2-Component-dan-Module/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular/2-Component-dan-Module/","excerpt":"","text":"KomponenKomponen ini dapat digunakan untuk membuat suatu layout atau menu. Contoh komponen yang digunakan sebagai layout yaitu seperti navbar, sidebar dan footer. Ada juga komponen yang digunakan sebagai menu seperti beranda, pengaturan, profil dan sebagainya.Untuk membuat componen dapat menggunakan perintah sebagai berikut :1ng g component NAMA_COMPONENT Sehingga Struktur foldernya akan menjadi seperti :123456789101112131415161718192021app/├── app.component.css├── app.component.html├── app.component.spec.ts├── app.component.ts├── app.module.ts├── navbar| ├── navbar.component.css| ├── navbar.component.html| ├── navbar.component.spec.ts| └── navbar.component.ts├── sidebar| ├── sidebar.component.css| ├── sidebar.component.html| ├── sidebar.component.spec.ts| └── sidebar.component.ts├── footer ├── footer.component.css ├── footer.component.html ├── footer.component.spec.ts └── footer.component.ts Membuat ModuleModule ini seperti package atau folder. Dia berfungsi untuk menampung beberapa component yang memiliki fungsi yang sama. Analoginya seperti suatu transaksi memiliki aksi seperti jual, beli &amp; rekap. Transaksi merupakan modulenya dan jual beli &amp; rekap adalah componentnya.Untuk membuat module dapat menggunakan perintah sebagai berikut :1ng g module NAMA_MODULE Setelah itu struktur foldernya akan seperti berikut1234567891011121314151617181920212223app/├── app.component.css├── app.component.html├── app.component.spec.ts├── app.component.ts├── app.module.ts├── navbar| ├── navbar.component.css| ├── navbar.component.html| ├── navbar.component.spec.ts| └── navbar.component.ts├── sidebar| ├── sidebar.component.css| ├── sidebar.component.html| ├── sidebar.component.spec.ts| └── sidebar.component.ts├── footer| ├── footer.component.css| ├── footer.component.html| ├── footer.component.spec.ts| └── footer.component.ts└── transaksi └── transaksi.module.ts Kemudian kita buat beberapa component di dalamnya sehingga sebagai berikut1234567891011121314151617181920212223242526272829303132├── navbar| ├── navbar.component.css| ├── navbar.component.html| ├── navbar.component.spec.ts| └── navbar.component.ts├── sidebar| ├── sidebar.component.css| ├── sidebar.component.html| ├── sidebar.component.spec.ts| └── sidebar.component.ts├── footer| ├── footer.component.css| ├── footer.component.html| ├── footer.component.spec.ts| └── footer.component.ts└── transaksi ├── jual │ ├── jual.component.css │ ├── beli.component.html │ ├── beli.component.spec.ts │ └── beli.component.ts ├── beli │ ├── beli.component.css │ ├── beli.component.html │ ├── beli.component.spec.ts │ └── beli.component.ts ├── rekap │ ├── rekap.component.css │ ├── rekap.component.html │ ├── rekap.component.spec.ts │ └── rekap.component.ts └── transaksi.module.ts jual, beli dan rekap merupakan component dari module transaksi. Sedangkan navbar, sidebar dan footer dikenal sebagai layout component.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Setup Project Angular2","slug":"pemrograman/angular/1-Setup-Project-Angular2","date":"un55fin55","updated":"un55fin55","comments":true,"path":"2017/04/28/pemrograman/angular/1-Setup-Project-Angular2/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular/1-Setup-Project-Angular2/","excerpt":"","text":"Menginstall NodeUntuk menginstall node saya menyarankan menggunakan tutorial dari Digital Ocean dengan menggunakan nvm. Menginstall npmUntuk menginstall npm cukup tulis kode berikut pada terminal anda (khusus untuk ubuntu):1sudo apt install npm Atau apabila anda menggunakan Sistem Operasi yang lain anda bisa mencarinya di internet. Menginstall Angular CLIAngular ini adalah salah satu tools untuk membuat aplikasi angular2. Untuk menggunakanya cukup tulis kode berikut pada terminal anda :1npm install -g @angular/cli Membuat Project Angular21ng new NAMA_PROJECT Setelah itu akan dibuat struktur folder sebagai berikut :1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374NAMA_FOLDER/├── .git│ ├── branches│ ├── COMMIT_EDITMSG│ ├── config│ ├── description│ ├── HEAD│ ├── hooks│ │ ├── applypatch-msg.sample│ │ ├── commit-msg.sample│ │ ├── post-update.sample│ │ ├── pre-applypatch.sample│ │ ├── pre-commit.sample│ │ ├── prepare-commit-msg.sample│ │ ├── pre-push.sample│ │ ├── pre-rebase.sample│ │ └── update.sample│ ├── index│ ├── info│ │ └── exclude│ ├── logs│ │ ├── HEAD│ │ └── refs│ │ └── heads│ │ └── master│ ├── objects│ │ ├── 82│ │ │ └── e3a754b6a0fcb238b03c0e47d05219fbf9cf89│ │ ├── e6│ │ │ └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391│ │ ├── f1│ │ │ └── 65300d6c67d5599ceb9b0ed355c2a8cbe336bf│ │ ├── info│ │ └── pack│ └── refs│ ├── heads│ │ └── master│ └── tags├── .gitignore└── NAMA_PROJECT ├── .angular-cli.json ├── e2e │ ├── app.e2e-spec.ts │ ├── app.po.ts │ └── tsconfig.e2e.json ├── .editorconfig ├── .gitignore ├── karma.conf.js ├── package.json ├── protractor.conf.js ├── README.md ├── src │ ├── app │ │ ├── app.component.css │ │ ├── app.component.html │ │ ├── app.component.spec.ts │ │ ├── app.component.ts │ │ └── app.module.ts │ ├── assets │ │ └── .gitkeep │ ├── environments │ │ ├── environment.prod.ts │ │ └── environment.ts │ ├── favicon.ico │ ├── index.html │ ├── main.ts │ ├── polyfills.ts │ ├── styles.css │ ├── test.ts │ ├── tsconfig.app.json │ ├── tsconfig.spec.json │ └── typings.d.ts ├── tsconfig.json └── tslint.json Pada Project tersebut terdapat beberapa file yaitu : angular-cli.json. File ini berisi konfigurasi dari tools angular cli. package.json. File ini digenerate untuk setiap project yang menggunakan npm. Berisi konfigurasi dependency/library. tsconfig.json. File ini berisi konfigurasi untuk typscript compiler. Terdapat emitDecoratorMetadata yang digunakan memproses decorator dimana fungsinya sama dengan anotation pada spring framework. Decorator berfungsi untuk mengkonversi Typescript ke Javascript. Terdapat juga module yang berisi module systemnya. Terdapat juga target untuk outputnya nanti menjadi apa. Terdapat juga moduleResolution untuk system modulnya. Terdapat juga outDir untuk compilenya kemana. Terdapat juga sourceMap untuk mapping hasil compile ke sourcecode aslinya. node_module. Folder ini merupakan repository local yang berisi dependency yang telah didownload. index.html. File ini merupaka html indexnya. Angular2 ini menggenerate Single Page Aplication. Jadi file html cuma 1 dan yang lainya JS. main.ts. File ini merupaka main class nya. style.css. File css untuk global. app. Folder yang berisi sourcecode. Di folder ini terdapat beberapa file yaitu .css untuk cssnya, .html untuk templatenya, .spec.ts untuk testing, .ts untuk konfigurasi template dan ts, module.ts untuk modulenya (kalo di java seperti package). Running ProjectUntuk running project dapat gunakan code berikut pada terminal12cd NAMA_PROJECTng serve Hasilnya dapat anda lihat di browser pada localhost:4200. Build ProjectUntuk running project dapat gunakan code berikut pada terminal1ng serve Hasilnya dapat anda lihat pada folder dist Flow Angular2 main.ts akan dijalankan pertama kali. Di main.ts sendiri dia mengimport app.module.ts melalui koding import { AppModule } from &#39;./app/app.module&#39;;. Selain itu main.ts juga membootrap app.module.ts melalui koding platformBrowserDynamic().bootstrapModule(AppModule); Selanjutnya app.module.ts. Di app.module.ts dia terdapat declaration yang berisi kelas-kelas apa saja yang ada di modul ini. Selanjutnya ada import yang berisi kelas-kelas apa saja yang diimport. Selanjutnya ada bootstrap yang digunakan untuk menjalankan file (yaitu AppComponent). Selanjutnya app.component.ts. Di app.component.ts terdapat selector yang digunakan untuk tag pada html. Jadi dia akan mencari tag di html (yaitu app-root), apabila ada maka dia akan menginjectkan templatenya ke dalam tag tersebut. Templatenya sendiri berasa dari templateUrl. Selanjutnya app.component.html. Di app.component.html apabila ada variabel maka dia akan mengambilnya dari app.component.ts bagian export. Install BootstrapStep ini optional karena untuk css bisa pake framework yang lain atau menginputkan sendiri cssnya. Step ini hanya untuk mempermudah saja.Untuk menginstallnya dapat menggunakan kode12npm install --save @ng-bootstrap/ng-bootstrapnpm install bootstrap@4.0.0-alpha.6 Setelah itu includekan bootstrapnya ke file angular-cli.json.1234\"styles\": [ \"styles.css\", \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"], Arsitektur Aplikasi Angular2Arsitekturnya kurang lebih seperti berikut123456Aplikasi├── Top Level Component├── Module ├── Component |── File Typescript/JS |── File HTML Penjelasanya adalah setiap aplikasi terdiri dari satu atau lebih Component. Module yang tersusun dari satu atau lebih Component. Component sendiri dibuat berdasarkan file Typescript dan HTML. Berikut contoh sederhananya:12345678910Aplikasi Tabungan Emas├── Sidebar Component│ ├── Informasi Rekening│ ├── Transaksi Emas│ │ ├── Form│ │ ├── Rekap├── Navbar Component│ ├── Settings│ ├── Profile│ ├── Help","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Introduction to Angular2","slug":"pemrograman/angular/0-Introduction-to-Angular2","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/04/28/pemrograman/angular/0-Introduction-to-Angular2/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular/0-Introduction-to-Angular2/","excerpt":"","text":"Sekilas tentang AngularAngular merupakan framework untuk membangun aplikasi frontend web, desktop dan mobile. Angular sendiri pada awalnya berbasis bahasa pemrograman Javascript tetapi kemudian mulai versi 2 keatas ditambahkan untuk bahasa pemrograman Typescript. Pada Tutorial kali ini kita akan coba membuat aplikasi angular untuk frontend web. Roadmap Belajar Angular Setup Project Angular Component dan Module Routing Top Level Conponent [Routing Module]","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Membuat Report dengan Jasper Report","slug":"pemrograman/spring/report/jasper-report","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/04/23/pemrograman/spring/report/jasper-report/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/report/jasper-report/","excerpt":"","text":"Tambahkan dependency 12345678910111213141516171819&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.github.jpenren&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-spring-data-dialect&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt; &lt;artifactId&gt;jasperreports&lt;/artifactId&gt; &lt;version&gt;6.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;3.10.1&lt;/version&gt; &lt;/dependency&gt; Membuat file .jrxml menggunakan Jaspersoft Studio Copy file ke resource/reports tambahkan bean JasperReportsViewResolver ke konfigurasiweb12345678910@Bean public JasperReportsViewResolver getJasperReportsViewResolver()&#123; JasperReportsViewResolver resolver = new JasperReportsViewResolver(); resolver.setPrefix(\"classpath:/reports/\"); resolver.setSuffix(\".jrxml\"); resolver.setViewNames(\"report_*\"); resolver.setViewClass(JasperReportsMultiFormatView.class); resolver.setOrder(0); return resolver; &#125; buat controllernya1234567891011121314151617181920@Controllerpublic class BugReportController &#123; @Autowired private BugDao dao; @RequestMapping(\"/bug\") public ModelAndView generateAllBugReport(ModelAndView m, @RequestParam(value = \"format\", required = false) String format)&#123; Iterable&lt;Bug&gt; data = dao.findAll(); m.addObject(\"dataSource\", data); m.addObject(\"tanggalUpdate\", new Date()); m.addObject(\"format\", \"pdf\"); if(format != null &amp;&amp; !format.isEmpty())&#123; m.addObject(\"format\", format); &#125; m.setViewName(\"report_bug\"); return m; &#125;&#125;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Template Engine Thymeleaf","slug":"pemrograman/spring/template-engine/layout-dengan-thymeleaf","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/template-engine/layout-dengan-thymeleaf/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/template-engine/layout-dengan-thymeleaf/","excerpt":"","text":"Layout dengan Thymeleaf Thymeleaf adalah template engine untuk JVM. Dia support HTMl, XML, TEXT, CSS, JS, dan RAW. Thymeleaf emmpunya kemampuan yang dikenal dengan Natural Template yaitu dimana kita dapat membuat 2 buah value yang sama. Hal ini mempermudah antara designer dan programer agar dapat bekerja bersama. Ketika value dari backed belum ada designer dapat menggunakan value html. 1&lt;input type=\"text\" name=\"userName\" value=\"James Carrot\" th:value=\"$&#123;user.name&#125;\" /&gt; Menggunakan Thymeleaf Tambahkan xmlns dibawah ini pada tag html 1&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; Expression di Thymeleaf Menampilkan pesan menggunakan #{}Contoh Menampilkan nama user yang sedang online 1&lt;p th:utext=\"#&#123;home.welcome($&#123;session.user.name&#125;)&#125;\"&gt; Menampilkan variabel menggunakan ${}contoh menggunakan th:each: 123456789&lt;tr th:each=\"pesertas : $&#123;peserta&#125;\"&gt; &lt;td th:text=\"$&#123;pesertas.nama&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.email&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.noHp&#125;\"&gt;&lt;/td&gt; &lt;td&gt; &lt;a th:href=\"$&#123;'/peserta/edit/'+pesertas.id&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-edit\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;a th:href=\"$&#123;'/peserta/hapus/'+pesertas.id&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt;&lt;/tr&gt; Menampilkan link url menggunakan @{}.Contoh url dapat berasal dari mapping controller : 1&lt;a th:href=\"@&#123;/peserta&#125;\"&gt;Daftar Peserta&lt;/a&gt; Contoh url dapat berasal dari default folder : 1&lt;link th:href=\"@&#123;/css/bootstrap.min.css&#125;\" rel=\"stylesheet\" /&gt; Template Inheritance Template Inheritance dapat menggunakan 1&lt;div layout:fragment=\"content\"&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Otorisasi Login dengan spring security","slug":"pemrograman/spring/security/1-otorisasi-login-dengan-spring-security","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security/","excerpt":"","text":"Bikin Otorisasi Login Tambahkan dependency (pom.xml) 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt; Bikin KonfigurasiSecurity (main/java/domain/config/KonfigurasiSecurity.java) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter&#123; private static final String SQL_LOGIN = \"SELECT username,password, enable \" + \"FROM s_users WHERE username = ?\"; private static final String SQL_PERMISSION = \"SELECT u.username, r.nama as authority \" + \"FROM s_users u \" + \"JOIN s_user_role ur on u.id = ur.id_user \" + \"JOIN s_roles r on ur.id_role = r.id \" + \"WHERE u.username = ?\"; @Autowired private DataSource dataSource; @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception&#123; //setting security non database auth .inMemoryAuthentication() .withUser(\"ciazhar\") .password(\"123\") .roles(\"apa\"); ///Setting security database /*auth .jdbcAuthentication() .dataSource(dataSource) .usersByUsernameQuery(SQL_LOGIN) .authoritiesByUsernameQuery(SQL_PERMISSION);*/ &#125; ///konfigurasi web mana yg boleh diakses admin staf user dll protected void configure(HttpSecurity http) throws Exception&#123; http .authorizeRequests() .antMatchers(\"/css/**\",\"/js/**\").permitAll() .anyRequest().authenticated() .and() .formLogin() .loginPage(\"/login\") .defaultSuccessUrl(\"/\") .permitAll() .and() .logout(); &#125;&#125; Register UI(src/main/java/domain/config/KonfigurasiWeb.java)Karena form login kita tidak menggunakan controller, maka harus didaftarkan terlebih dahulu. 123456789@Configurationpublic class KonfigurasiWeb extends WebMvcConfigurerAdapter&#123; @Override public void addViewControllers(ViewControllerRegistry registry)&#123; registry.addViewController(\"/login\").setViewName(\"login\"); registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\"); &#125;&#125; Bikin UI Login(main/resources/login.html) 123456789101112131415161718192021222324252627282930313233343536373839&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; &lt;head&gt; &lt;title&gt;Log In&lt;/title&gt; &lt;!-- Bootstrap core CSS --&gt; &lt;link th:href=\"@&#123;/css/bootstrap.min.css&#125;\" rel=\"stylesheet\" /&gt; &lt;link th:href=\"@&#123;/css/bootstrap-theme.min.css&#125;\" rel=\"stylesheet\" /&gt; &lt;link th:href=\"@&#123;/css/signin.css&#125;\" rel=\"stylesheet\" /&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;form name=\"f\" class=\"form-signin\" th:action=\"@&#123;/login&#125;\" method=\"post\"&gt; &lt;div th:if=\"$&#123;param.error&#125;\" class=\"alert alert-error\"&gt; Invalid username and password. &lt;/div&gt; &lt;div th:if=\"$&#123;param.logout&#125;\" class=\"alert alert-success\"&gt; You have been logged out. &lt;/div&gt; &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt; &lt;label for=\"username\" class=\"sr-only\"&gt;Username&lt;/label&gt; &lt;input type=\"text\" name=\"username\" id=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"true\" autofocus=\"true\" /&gt; &lt;label for=\"password\" class=\"sr-only\"&gt;Password&lt;/label&gt; &lt;input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"true\" /&gt; &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt; &lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Kardinalitas pada Spring Data JPA","slug":"pemrograman/spring/jpa/3-kardinalitas","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/jpa/3-kardinalitas/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/3-kardinalitas/","excerpt":"","text":"Sedang dalam pembuatan Konten","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"CRUD dengan Content digenerate di Client Side Menggunakan Spring Data JPA dan AngularJS","slug":"pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS/","excerpt":"","text":"Memulai AngularJS Membuat file html (src/main/resources/templates/materi/listMateri.html) 12345678910&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Daftar Materi&lt;/title&gt; &lt;/head&gt; &lt;body ng-app=\"\"&gt; &lt;h1&gt;Daftar Materi&lt;/h1&gt; &lt;script th:src=\"@&#123;/js/angular.min.js&#125;\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Register view(src/main/java/domain/config/KonfigurasiWeb) 1registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\"); Binding Binding yaitu menggunakan data input untuk di outputkan secara dinamis(tanpa submit/client side). Prosesnya adalah user menginputkan data. Kemudian data itu disimpan ke sebuah variabel. Kemudian variabel itu dioutputkan lagi. Contoh 123456&lt;body ng-app=\"\"&gt; Nama anda : &lt;input type=\"text\" ng-model=\"nama\"/&gt; Selamat datang &#123;&#123;nama&#125;&#125; &lt;script th:src=\"@&#123;/js/angular.min.js&#125;\"&gt;&lt;/script&gt;&lt;/body&gt; Menggunakan $scope$scope digunakan untuk menghubungkan variabel di html dengan javascript. Mencetak data Array (src/main/resources/templates/materi/listMateri.html) 123456789&lt;div ng-controller=\"MateriController\"&gt; Input Materi &lt;input type=\"text\" ng-model=\"namaMateri\"/&gt;&lt;br/&gt; Materi &#123;&#123;namaMateri&#125;&#125; berhasil diinput. &lt;ul&gt; &lt;li ng-repeat=\"materi in daftarMateri\"&gt;&#123;&#123;materi&#125;&#125;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script th:src=\"@&#123;/js/materi.js&#125;\"&gt;&lt;/script&gt; Membuat file JS(/src/main/resources/static/js/materi.js) 1234567var materiapp = angular.module ('materiapp',[]);materiapp.controller('MateriController', function($scope)&#123; $scope.daftarMateri = [ 'Java Fundamental', 'Spring Framework' ];&#125;); Memasukkan Data ke Array (src/main/resources/templates/materi/listMateri.html) 1&lt;button ng-click=\"tambahMateri()\"&gt;Tambahkan&lt;/button&gt; (/src/main/resources/static/js/materi.js) 123$scope.tambahMateri = function()&#123; $scope.daftarMateri.push($scope.namaMateri);&#125; Menghapus Data dari Array (src/main/resources/templates/materi/listMateri.html) 1&lt;button ng-click=\"tambahMateri()\"&gt;Tambahkan&lt;/button&gt; (/src/main/resources/static/js/materi.js) 123$scope.tambahMateri = function()&#123; $scope.daftarMateri.push($scope.namaMateri);&#125; - Generate daftar Materi membuat controller 12345678910@RestController@RequestMapping(\"/api\")public class MateriApiController &#123; @Autowired private MateriDao md; @RequestMapping(value = \"/materi\", method = RequestMethod.GET) public Page&lt;Materi&gt; daftarMateri(Pageable page)&#123; return md.findAll(page); &#125;&#125; Keteranga :Karena kita menggunakan RestController maka hasil output akan berupa rest(biasanya json). javascript 123456789101112131415161718materiapp.controller('GenerateMateriController', function($http, $scope)&#123; $scope.daftarMateri = &#123;&#125;; $scope.listMateri = function()&#123; $http.get('/api/materi').then(sukses,gagal); function sukses(response)&#123; $scope.daftarMateri = response.data; console.log($scope.daftarMateri); &#125;; function gagal(response)&#123; console.log(response); alert('Error'+response); &#125;; &#125;; $scope.listMateri();&#125;); Keterangan:Kita membuat controller baru dengan nama GenerateMateriController. Lalu kita membuat daftarMateri sebagai penampung data json yang akan kita dapat dari /api/materi menggunakan fungsi listMateri. html 12345678910111213141516&lt;div ng-controller=\"GenerateMateriController\"&gt; &lt;table border=\"1\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;td&gt;Nama&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr ng-repeat= \"materi in daftarMateri.content\"&gt; &lt;td&gt;&#123;&#123;materi.kode&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;materi.nama&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; Keterangan :membuat div yang telah diinjek dengan GenerateMateriController. kemudian menggenerate materi dari daftarMateri menggunakan ng-repeat. Menghapus materi membuat fungsi hapus (javascript) 12345678910$scope.hapusMateri = function(materi)&#123; $http.delete('/api/materi/'+materi.id).then(sukses, gagal); function sukses(response)&#123; $scope.listMateri(); &#125; function gagal(response)&#123; console.log(response); alert('Error : '+response); &#125;; &#125;; menambahkan button hapus (html) 1&lt;td&gt;&lt;button ng-click=\"hapusMateri(materi)\"&gt;hapus&lt;/button&gt;&lt;/td&gt; Menyimpan materi membuat fungsi simpan (javascript) 12345678910$scope.simpanMateri = function()&#123; $http.post('/api/materi', $scope.materi).then(sukses,gagal); function sukses(response)&#123; $scope.listMateri(); &#125; function gagal(response)&#123; console.log(response); alert('Error : '+response); &#125;;&#125;; menambahkan form input (html) 1234567891011121314151617&lt;table&gt; &lt;tr&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" ng-model=\"materi.kode\" required=\"true\"/&gt;&lt;/td&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Nama&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" ng-model=\"materi.nama\" required=\"true\"/&gt;&lt;/td&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&lt;button ng-click=\"simpanMateri()\"&gt;Simpan&lt;/button&gt;&lt;/td&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"CRUD Menggunakan Spring Data JPA dan Thymeleaf","slug":"pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf","date":"un00fin00","updated":"un66fin66","comments":true,"path":"2017/04/23/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf/","excerpt":"","text":"CRUD menggunakan Spring Data JPAUntuk melakukan CRUD, setiap entitas didefinisikan dengan beberapa tahap yaitu : Membuat Model.Di model ini akan terdapat atribut-atribut yang nantinya akan ditrasformasikan menjadi tabel pada Database. Membuat DAO.Dia yang bertugas mendefinisikan metode apa saja yang dibutuhkan oleh Controller. Membuat Controller.Controller ini berfungsi untuk mengatur apa yang akan ditampilkan ke view, apa yang akan disimpan ke database dan melakukan mapping url. Membuat View (List dan Form).View ini akan menjadi apa yang akan dilihat oleh user.Jadi Struktur foldernya akan seperti ini :Struktur foldernya akan seperti berikut :12345678910111213141516src └── main | ├── java | └── com | └── example | ├── DemoApplication.java | ├── controllers | ├── dao | └── model └── resources ├── application.properties ├── static │ ├── css │ ├── fonts │ └── js └── templates CRUD sendiri dapat dibagi menjadi 2 tipe tergantung dimana menggenerate contenya, yaitu client side dan server side. Dalam mengiplementasikanya, bentuk Model dan Dao nya tetap sama, yang membedakan adalah controller dan viewnya saja. Membuat Model Membuat class untuk model 123@Entitypublic class Peserta &#123;&#125; Keterangan :Untuk setiap kelas yang ingin dibuat menjadi model, harus diberi anotasi Entity pada bagian atasnya. Menambahkan atribut 12345678@Entitypublic class Peserta &#123; private String id; private String nama; private String email; private String noHp;&#125; Menambahkan validasi tiap atribut 123456789101112131415161718192021222324@Entity @Table(name = \"tabel_peserta\")public class Peserta &#123; @Id @GeneratedValue(generator = \"uuid\") @GenericGenerator(name = \"uuid\", strategy = \"uuid2\") private String id; @Column(nullable=false) @NotNull @NotEmpty @Size(min = 1, max = 150) private String nama; @Column(nullable=false,unique=true) @Email @NotNull @NotEmpty private String email; @Column(nullable=false,unique=true) @NotNull @NotEmpty private String noHp;&#125; Keterangan :Validasi di spring sendiri menggunkan JSR-303. Setiap variabel dapat didefinisikan secara spesifik menggunakan validasi. Sebagai Table, NotNull, NotEmpty dll. Menambahkan getter dan setter 12345678910111213141516171819202122232425262728293031public String getId() &#123; return id;&#125;public void setId(String id) &#123; this.id = id;&#125;public String getNama() &#123; return nama;&#125;public void setNama(String nama) &#123; this.nama = nama;&#125;public String getEmail() &#123; return email;&#125;public void setEmail(String email) &#123; this.email = email;&#125;public String getNoHp() &#123; return noHp;&#125;public void setNoHp(String noHp) &#123; this.noHp = noHp;&#125; Membuat DAO Membuat interface dao dan menginherit class PagingAndSortingRepository 123public interface PesertaDao extends PagingAndSortingRepository&lt;Peserta, String&gt;&#123;&#125; Keterangan :Dengan menginherit class PagingAndSortingRepository kita dapat menggunakan method yang biasa digunakan untuk CRUD seperti findAll, findOne, save, delete dll. Membuat methode untuk searching (optional) 123456public interface PesertaDao extends PagingAndSortingRepository&lt;Peserta, String&gt;&#123; @Query(value = \"select p from Peserta p where p.kelas.id = ?1 ORDER BY id_kelas\") public Page&lt;Peserta&gt; findByKelasId(String id_kelas, Pageable pageable);&#125; Keterangan :Selain spring sudah mendefinisikan method yang sering digunakan, spring juga memperbolehkan kita untuk membuat method sesuai yang kita inginkan. Sebagai contoh diatas kita membuat Page yang berisi daftar peserta berdasar kelas tertentu. Dalam pembuatanya spring juga memperbolehkan menggunakan query sql atau query jpa. Membuat controller (src/main/java/domain/controller/PesertaPagingController.java) 12345678910111213141516171819202122232425262728293031323334353637@Controller@RequestMapping(\"/peserta\")public class PesertaPagingController &#123; @Autowired PesertaPagingDao pesertaPagingDao; @RequestMapping(\"/list\") public String listPeserta(ModelMap modelMap)&#123; modelMap.put(\"peserta\",pesertaPagingDao.findAll()); return \"/peserta/list\"; &#125; @RequestMapping(value = \"/form\", method = RequestMethod.GET) public void tampilkanForm( @RequestParam(required = false, name = \"id\") PesertaPaging peserta, ModelMap mm)&#123; if(peserta != null)&#123; mm.addAttribute(\"peserta\", peserta); &#125; else &#123; mm.addAttribute(\"peserta\", new PesertaPaging()); &#125; &#125; @RequestMapping(value = \"/form\", method = RequestMethod.POST) public String prosesForm(@ModelAttribute @Valid PesertaPaging p, BindingResult hasilValidasi)&#123; if(hasilValidasi.hasErrors())&#123; return \"/peserta/form\"; &#125; pesertaPagingDao.save(p); return \"redirect:list\"; &#125; @RequestMapping(value = \"/hapus\") public String hapusPeserta(@RequestParam(name = \"id\")String id,ModelMap modelMap)&#123; pesertaPagingDao.delete(id); return \"redirect:list\"; &#125;&#125; Membuat UI untuk list(src/main/resources/templates/peserta/list.html) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;title&gt;Aplikasi Spring Boot&lt;/title&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/bootstrap.min.css&#125;\" media=\"screen\"/&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/starter-template.css&#125;\" media=\"screen\"/&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class=\"navbar navbar-inverse navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" th:href=\"@&#123;/&#125;\"&gt;ciazhar&lt;/a&gt; &lt;/div&gt; &lt;div id=\"navbar\" class=\"collapse navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt;&lt;a th:href=\"@&#123;/peserta&#125;\"&gt;Daftar Peserta&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!--/.nav-collapse --&gt; &lt;/div&gt;&lt;/nav&gt;&lt;div class=\"container\"&gt; &lt;h1&gt;Daftar Peserta&lt;/h1&gt; &lt;div th:if=\"$&#123;not #lists.isEmpty(peserta)&#125;\"&gt; &lt;table class=\"table table-striped\"&gt; &lt;tr&gt; &lt;th&gt;Nama&lt;/th&gt; &lt;th&gt;Email&lt;/th&gt; &lt;th&gt;No Hp&lt;/th&gt; &lt;th&gt;Action&lt;/th&gt; &lt;/tr&gt; &lt;tr th:each=\"pesertas : $&#123;peserta&#125;\"&gt; &lt;td th:text=\"$&#123;pesertas.nama&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.email&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.noHp&#125;\"&gt;&lt;/td&gt; &lt;td&gt; &lt;a th:href=\"@&#123;/peserta/form(id=$&#123;pesertas.id&#125;)&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-edit\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;a th:href=\"@&#123;/peserta/hapus(id=$&#123;pesertas.id&#125;)&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;a class=\"btn btn-default\" th:href=\"@&#123;/peserta/form&#125;\"&gt;New&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt;&lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Membuat UI untuk form(src/main/resources/templates/peserta/form.html) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;title&gt;Aplikasi Spring Boot&lt;/title&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/bootstrap.min.css&#125;\" media=\"screen\"/&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/starter-template.css&#125;\" media=\"screen\"/&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class=\"navbar navbar-inverse navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" th:href=\"@&#123;/&#125;\"&gt;ciazhar&lt;/a&gt; &lt;/div&gt; &lt;div id=\"navbar\" class=\"collapse navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt;&lt;a th:href=\"@&#123;/peserta&#125;\"&gt;Daftar Peserta&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!--/.nav-collapse --&gt; &lt;/div&gt;&lt;/nav&gt;&lt;div class=\"container\"&gt; &lt;h1&gt;Form Peserta&lt;/h1&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-sm-8\"&gt; &lt;form class=\"form-horizontal\" th:object=\"$&#123;peserta&#125;\" th:action=\"@&#123;/peserta/form&#125;\" method=\"post\"&gt; &lt;input type=\"hidden\" th:field=\"*&#123;id&#125;\"/&gt; &lt;div class=\"form-group\"&gt; &lt;label class=\"col-sm-2 control-label\"&gt;Nama:&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"text\" class=\"form-control\" th:field=\"*&#123;nama&#125;\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label class=\"col-sm-2 control-label\"&gt;Email:&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"email\" class=\"form-control\" th:field=\"*&#123;email&#125;\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label class=\"col-sm-2 control-label\"&gt;Nomer HP:&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"text\" class=\"form-control\" th:field=\"*&#123;noHp&#125;\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;button type=\"submit\" class=\"btn btn-deffault\"&gt;Simpan&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt;&lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL","slug":"pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/04/23/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql/","excerpt":"","text":"Setup Project untuk CRUDPada tutorial kali ini kita akan melakukan Create Read Update Delete (CRUD) menggunakan Spring Data JPA. Kita akan menggunakan mysql untuk databasenya, jadi anda harus menginstallnya terlebih dahulu.Berikut ini merupakan langkah-langkahnya : Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;6.0.6&lt;/version&gt;&lt;/dependency&gt; Untuk mencari dependency dapat dilihat di Maven Repostory Setting Database (main/resources/application.properties)123spring.datasource.url=jdbc:mysql://localhost:3306/pelatihanspring.datasource.username=pelatihanuserspring.datasource.password=pelatihanpasswd Keterangan : spring.datasource.url merupakan url untuk database. Dalam pengisianya harap disesuaikan dengan jenis database, port pada perangkat, dan nama database yang telah dibuat. Pada contoh tersebut menggunakan jenis database (mysql), port pada perangkat (3306), dan nama database(pelatihan) spring.datasource.username merupakan username database. spring.datasource.password merupakan password database. Membuat Schema (CLI).Untuk schema tetap harus dibuat manual. Berikut langkah-langkahnya untuk mysql. Login ke mysql. Jika sudah login dapat diabaikan langkah ini. 1mysql -u root -p Memasang otentifikasi database 1grant all on pelatihan.* to pelatihanuser@localhost identified by &apos;pelatihanpasswd&apos; Membuat database 1create database pelatihan; Meggunakan MySQL (CLI)Berikut adalah sintaks yang akan sering digunakan dalam mysql. Menggunakan database 1use pelatihan; Melihat list tabel dalam database 1show tables; Melihat atribut pada tabel secara detail 1show create table nama_tabel \\G Melihat data pada tabel 1select * from nama_tabel Menghapus data pada tabel 1drop table peserta;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Membuat Web Menggunakan Spring Boot dan Thymeleaf","slug":"pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/","excerpt":"","text":"Pada tutorial sebelumnya kita sudah melakukan setup project spring pada perangkat anda. Sekarang kita akan coba melihat bagaimana aplikasi spring dibuat.Untuk pertama kali kita akan coba membuat laman web sederhana. Langkah-langkahnya adalah sebagai berikut : Membuat controller sederhana (main/java/domain/Controllers/HaloController.java)1234567@Controllerpublic class HaloController&#123; @RequestMapping(\"/\") public String halo()&#123; return \"index\"; &#125;&#125; Keterangan : @Controller digunakan untuk menandai bahwa class HaloController adalah class controller @RequestMapping digunakan untuk melakukan mapping url pada metode bernama halo ke /. Kemudian controller itu akan di tampilkan pada view bernama index. Membuat file HTML (main/resources/templates/index.html)123456789101112131415161718192021222324252627282930&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; &lt;head&gt; &lt;title&gt;Aplikasi Spring Boot&lt;/title&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/bootstrap.min.css&#125;\" media=\"screen\"/&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/signin.css&#125;\" media=\"screen\"/&gt; &lt;/head&gt; &lt;body&gt; &lt;nav class=\"navbar navbar-inverse navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" th:href=\"@&#123;/&#125;\"&gt;ciazhar&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;div class=\"container\"&gt; &lt;h1&gt;Aplikasi Spring Boot Dengan Thymeleaf&lt;/h1&gt; &lt;/div&gt; &lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt; &lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Keterangan : &lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; menandai bahwa html itu menggunakan template engine thymeleaf th:href (jika di html bernama href) digunakan untuk menginjek css. css tersebut dapat di simpan di src/main/resources/static/css. Tetapi karena src/main/resources/static merupakan classpath maka untuk menginjeknya hanya perlu dari folder css saja. contoh : &lt;link rel=&quot;stylesheet&quot; th:href=&quot;@{/css/bootstrap.min.css}&quot; media=&quot;screen&quot;/&gt;Selain itu kita juga dapat menggunakanya untuk melakukan link sesuai mapping di controller. contoh : &lt;a class=&quot;navbar-brand&quot; th:href=&quot;@{/}&quot;&gt;ciazhar&lt;/a&gt; th:src(jika di html bernama src) digunakan untuk menginjek js. js tersebut dapat di simpan di src/main/resources/static/js. contoh : &lt;script th:src=&quot;@{/js/jquery.min.js}&quot;&gt;&lt;/script&gt; Memasang Library (/src/main/resources)Jika kita lihat pada html diatas kita memerlukan beberapa library yaitu bootstrap dan jquery. Library tersebut dapat anda download di official masing-masing library tersebut. Kemudian masukkan ke /src/main/resources/css untuk file CSS dan /src/main/resources/js untuk file JS. Jika anda asset diinjek menggunakan CDN anda dapat melewati langkah berikut.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Setup Project Spring Boot","slug":"pemrograman/spring/intro/2-setup-project-spring-boot","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/04/23/pemrograman/spring/intro/2-setup-project-spring-boot/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/intro/2-setup-project-spring-boot/","excerpt":"","text":"1. Install Development EnvironmentUntuk menggunakan Spring Boot anda perlu menginstall beberapa Development Environment. Diantaranya adalah : Java Development Kit (JDK atau openJDK). Build Tools (Apache Maven atau Gradle). IDE atau Text Editor (IntellijIDEA / VSCode). Setup Project Mengunakan Spring Initializer Buka browser lalu masukkan url http://start.spring.io/ Maka akan tampil antarmuka seperti ini. Selanjutnya anda akan diminta untuk mengisi beberapa data yaitu : Tipe Project. Project dapat berupa maven atau gradle. Isi dengan Build tools yang sudah anda install di komputer anda. Versi Spring. Pilih versi terbaru yang bukan SNAPSHOOT. Project Metadata. Format pengisianya adalah sebagai berikut :Group : com.nama.domain.anda (dipisah dengan titik)Artifact : nama-aplikasi-anda (tidak boleh diberi spasi) Dependencies. Isi dengan library yang anda butuhkan. Pada tutorial ini kita kan menggunakan Thymeleaf dan Web. Generate Project. Add project ke text editor/IDE. Struktur Folder Aplikasi Spring BootStruktur foldernya akan seperti berikut : 12345678910111213141516171819demo├── mvnw├── mvnw.cmd├── pom.xml└── src ├── main │ ├── java │ │ └── com │ │ └── example │ │ └── DemoApplication.java │ └── resources │ ├── application.properties │ ├── static │ └── templates └── test └── java └── com └── example └── DemoApplicationTests.java Sebagai catatan struktur folder tersebut dapat berubah sesuai data yang anda masukkan saat membuat project.Anda dapat menghapus mvnw dan mvn.cmd. Pada Project tersebut terdapat beberapa file yaitu : pom.xml. File ini merupakan konfigurasi dari Maven. Jika anda menggunakan Gradle maka yang dibuat adalah file .gradle. Di dalam folder src/main/java/com/example terdapat file DemoApplication.java. File ini merupakan main file dari aplikasi spring boot anda. Folder src/main/java/com/example sendiri digunakan untuk menampung file-file java. Di dalam folder src/main/resources terdapat file application.properties. File ini digunakan untuk mengkonfigurasi aplikasi spring. Folder src/main/respurces/static digunakan untuk menampung file static (hmtl, css dan js) Folder src/main/respurces/templates digunakan untuk menampung file html yang menggunakan Thymeleaf. Folder src/test/java/com/example digunakan untuk menampung file-file testing. Running ProjectUntuk menjalankan project dapat menggunakan perintah berikut pada CLI1mvn clean spring-boot:run","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Android","slug":"pemrograman/android/1-view","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/android/1-view/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/android/1-view/","excerpt":"","text":"Android for BeginnerLayoutingViewPengertian ViewView pada dasarnya adalah sebuah kotak yang berisi berbagai macam konten. Konten tersebut dapat berupa kalimat gambar, tulisan tombol dan sebagainya. Macam - macam view berdasar kontenya Text View Image View Button Dalam menuliskan pemrograman, kita diharuskan untuk menulis kode program sebagai instruksi yang spesifik dan detail. IDE (Integrated Development Environment) merupakan suatu ruang kerja berupa perangkat lunak yang digunakan untuk menulis kode program. IDE yang biasa digunakan untuk menulis kode program android adalah Android Studio. Bahasa yang digunakan untuk membuat view pada Android berupa XML. Untuk menulis kode xml anda dapat menggunakan https://udacity.github.io/android-layout. Kode XML digambarkan sebagai berikut : 1234567&lt;TextView android:text=\"Ini Text\" android:textColor=\"@android:color/white\" android:background=\"@android:color/black\" android:layout_width=\"200dp\" android:layout_height=\"300dp\"/&gt; Kode tersebut memiliki ketentuan yaitu : Kode program ditulis di dalam tag. Tag didefinisikan dengan &lt;&gt; (kurung siku). Terdapat 2 tag yaitu tag pembuka dan tag penutup. Perbedaan antara tag pembuka dan tag penutup terdapat tanda /(garis miring).123&lt;TextView ...../&gt; Tag juga bisa didefinisikan seperti berikut :123&lt;TextView&gt; ....&lt;/TextView&gt; Terdapat nama tag yang mewakili view yang ingin dipakai. Dalam contoh diatas nama tag adalah TextView. Terdapat atribut(-atribut) yang digunakan untuk mengcustom view tersebut. Semisal untuk konten, warna tinggi dll. Setiap atribut memiliki nilai. Nilai mewakili apa yang akan dicustom pada setiap atribut. Nilai tersebut dipisahkan dari atributnya oleh tanda = (samadengan) dan ditulis di dalam &quot;&quot; (tanda petik dua). Text ViewMacam macam atribut untuk text view : Menulis text 123&lt;TextView android:text=\"tulis text anda di sini\"/&gt; Mengatur tinggi dan lebar layout 1234&lt;TextView android:height_layout=\"300dp\" android:width_layout=\"300dp\"/&gt; Satuan panjang (untuk panjang, tinggi dll) biasanya didefinisikan dengan satuan dp.Atau untuk membuatnya menyesuaikan lebar dan tinggi text, anda dapat menggunakan mengisi nilainya dengan wrap_content.1234&lt;TextView android:height_layout=\"wrap_content\" android:width_layout=\"wrap_content\"/&gt; Mengganti warna text 12345&lt;TextView android:textColor=\"@android:color/white\" atau android:textColor=\"#Kode_hexa_desimal\"/&gt; Mengganti ukuran font 123&lt;TextView android:textSize=\"30sp\"/&gt; Satuan ukuran font didefinisikan dengan sp. Ukuran font dapat juga didefinisikan sebagai berikut : 12345&lt;TextView android:textAppearance=\"?android:textAppearanceLarge\" android:textAppearance=\"?android:textAppearanceMedium\" android:textAppearance=\"?android:textAppearanceSmall\"/&gt; Referensi untuk design dapat dilihat di Material Design Spec atau google+ #AndroidDev #Protip Image viewMacam-macam atribut untuk Image View : Memilih gambar dari resource/assets: 123&lt;ImageView android:src=\"@drawable/ocean\"/&gt; Mengatur tinggi dan lebar layout 1234&lt;TextView android:height_layout=\"300dp\" android:width_layout=\"300dp\"/&gt; Mengatur posisi dan skala gambar 12345&lt;ImageView android:scaleType=\"centerCrop\" atau android:scaleType=\"center\"/&gt; Memposisikan ViewView GroupView group ini digunakan untuk mengelompokkan berbagai macam view. Jadi dia seperti div pada html. View group ini juga dapat didefinisikan sebagai parent sedangkan view didefinisikan sebagai child.Kode XML dari view grup digambarkan sebagai berikut :123456789101112131415&lt;LinearLayout android:orientation=\"vertical\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"&gt; &lt;TextView android:text=\"Guest List\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /&gt; &lt;TextView android:text=\"Kunai\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /&gt;&lt;/LinearLayout&gt; Note :Perlu diketahui setiap XML yang kita buat harus kita tambahkan xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;. Kode tersebut biasa disebut XML namespace declaration. Ini digunkan untuk mendefinisikan bahwa XML kita digunakan untuk android. Macam-macam view grup : Linear LayoutView disusun secara berderet baik horizontal ataupun vertikal pada view grup. Untuk menggunakan Linear Layout cukup menggunakan tag LinearLayout. Vertical row, yaitu view yang disusun secara vertical atas-bawah. Untuk menggunakan vertical row cukup tambahkan atribut android:orientation=&quot;vertical&quot;. Horizontal column, yaitu view yang disusun secara horizontal kanan-kiri. Untuk menggunakan horizontal column cukup tambahkan atribut android:orientation=&quot;horizontal&quot;. Untuk mengatur panjang dan tinggi view dengan menyesuaikan parentnya dapat menggunakan sintaks sebagai berikut :1234567891011121314151617&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; &lt;TextView android:text=\"Guest List\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt; &lt;TextView android:text=\"Kunai\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt;&lt;/LinearLayout&gt; Pada kode diatas LinearLayout menggunakan match parent yang mengakibatkanya memiliki tinggi dan lebar sebesar resolusi layar. Begitu juga dengan text view yang menyesuaikan LinearLayout memiliki lebar sebesar layar. Untuk mengatur proporsi pajang dan lebar antar view kita dapat menggunakan android:layout_weight=&quot;1&quot; dan setiap panjang dan lebar diatur ke 0dp. Berikut contohnya :12345678910111213141516171819&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; &lt;TextView android:text=\"Guest List\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:layout_weight=\"1\" /&gt; &lt;TextView android:text=\"Kunai\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:layout_weight=\"1\" /&gt;&lt;/LinearLayout&gt; Relative LayoutView disusun secara sembarang. Posisi view dapat dibagi menjadi yaitu bagian atas, kanan, kiri dan bawah. Relative to parent, yaitu view yang disusun relatif berdasarkan pada parent. Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut 12345678&lt;RelativeView&gt; .... &lt;TextView android:layout_alignParentTop=\"true/false\" android:layout_alignParentButton=\"true/false\" android:layout_alignParentLeft=\"true/false\" android:layout_alignParentRight=\"true/false\"&gt;&lt;RelativeView&gt; Untuk mengatur perataan konten dapat menggunakan 123456&lt;RelativeView&gt; .... &lt;TextView android:layout_centerHorizontal=\"true/false\" android:layout_centerVertical=\"true/false\"&gt;&lt;/RelativeView&gt; Posisi tersebut dapat dicustom sesuka hati dan dapat di mix and match. Semisal untuk pojok kiri atas maka yang top dan left diberi nilai true dan seterusnya. Relative to other child, yaitu view yang disusun relatif berdasarkan pada child lainya. Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut 12345678&lt;RelativeView&gt; .... &lt;TextView android:layout_alignParentTop=\"true/false\" android:layout_alignParentButton=\"true/false\" android:layout_alignParentLeft=\"true/false\" android:layout_alignParentRight=\"true/false\"&gt;&lt;RelativeView&gt; https://icons8.com/android-icons/","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Android","slug":"Pemrograman/Android","permalink":"http://ciazhar.github.io/categories/Pemrograman/Android/"}],"tags":[]},{"title":"Introduction to Spring","slug":"pemrograman/spring/intro/1-introduction-to-spring-boot","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/04/23/pemrograman/spring/intro/1-introduction-to-spring-boot/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/intro/1-introduction-to-spring-boot/","excerpt":"","text":"Sekilas tentang SpringThe Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform. A key element of Spring is infrastructural support at the application level: Spring focuses on the “plumbing” of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments. Features Dependency Injection Aspect-Oriented Programming including Spring’s declarative transaction management Spring MVC web application and RESTful web service framework Foundational support for JDBC, JPA, JMS Much more… All available features and modules are described in the Modules section of the reference documentation. Their maven/gradle coordinates are also described there. Roadmap Belajar SpringBerikut sekilas peta jalan yang dapat anda pelajari untuk dapat membuat aplikasi spring : Setup Project Setup Project Spring Boot Web Membuat Web Menggunakan Spring Boot dan Thymeleaf Template Engine Template Engine Thymeleaf Create Read Update Delete Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL CRUD dengan Spring Data JPA + Thymeleaf (Server Side Rendering) CRUD dengan Spring Data JPA + AngularJS (Client Side Rendering / RESTfull API) Debug Spring Data JPA Security Otoriasai login dengan Spring Security Otorisasi controller dengan Spring Security Debug Spring Security Melihat Data User Login dengan Spring Security Securing Spring Boot App with Spring OAuth2 + JSON Web Token (JWT) Single Signed On dengan Spring Security Report Membuat Report dengan Jasper Report Mail Membuat Register dengan Verifikasi Email Database Migration Migrasi Database dengan FlywayDB Microservice Microservice dengan Spring Cloud Spring Cloud Discovery Service (Eureka) Spring Cloud Circuit Breaker (Hystrix) Spring Cloud API Gateway (Zuul) Spring Cloud Config Service : Intro Spring Cloud Config Service : File System Spring Cloud Config Service : Vault Server Spring Cloud Config Service : Git Repositoty Spring Cloud Config Service : Config Client Spring Cloud Config Service : Encryption &amp; Decryption Spring Cloud Config Service : Refresh Scope &amp; Health Spring Cloud Config Service : Security","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]}]}