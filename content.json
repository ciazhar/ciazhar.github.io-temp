{"meta":{"title":"ciazhar","subtitle":"Someone INTJs","description":"Blog yang berisi konten dan tutorial yang berkaitan dengan pemrograman dan teknologi.","author":"Muhammad Hafidz","url":"http://ciazhar.github.io"},"pages":[{"title":"About","date":"un55fin55","updated":"un55fin55","comments":true,"path":"about/index.html","permalink":"http://ciazhar.github.io/about/index.html","excerpt":"","text":"Muhammad Hafidz"}],"posts":[{"title":"Service","slug":"pemrograman/angular2/4-Service","date":"un22fin22","updated":"un44fin44","comments":true,"path":"2017/05/09/pemrograman/angular2/4-Service/","link":"","permalink":"http://ciazhar.github.io/2017/05/09/pemrograman/angular2/4-Service/","excerpt":"","text":"Membuat shared module 12cd tabungan_emas;ng g module shared; Membuat auth service 12cd shared;cd g service auth;","categories":[],"tags":[]},{"title":"Setup Project Hexo","slug":"pemrograman/hexo/1-Setup-Project-Hexo","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/05/07/pemrograman/hexo/1-Setup-Project-Hexo/","link":"","permalink":"http://ciazhar.github.io/2017/05/07/pemrograman/hexo/1-Setup-Project-Hexo/","excerpt":"","text":"Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Hexo","slug":"Pemrograman/Hexo","permalink":"http://ciazhar.github.io/categories/Pemrograman/Hexo/"}],"tags":[]},{"title":"Introduction to Hexo","slug":"pemrograman/hexo/0-Introduction-to-Hexo","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/05/07/pemrograman/hexo/0-Introduction-to-Hexo/","link":"","permalink":"http://ciazhar.github.io/2017/05/07/pemrograman/hexo/0-Introduction-to-Hexo/","excerpt":"","text":"Sekilas tentang HexoHexo merupakan suatu framework untuk mempermudah dalam membuat Blog atau Website probadi. Untuk mengulis konten pada Hexo, dapat menggunakan markdown yang kemudian akan dicompile menjadi html. Untuk Layout dan Design dapat menggunkaan EJS. Roadmap Belajar Hexo Setup Project Hexo Menulis Konten pada Hexo Mengganti Tema pada Hexo Mengkonfigurasi Teman pada Hexo Hosting Hexo ke Github Page","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Hexo","slug":"Pemrograman/Hexo","permalink":"http://ciazhar.github.io/categories/Pemrograman/Hexo/"}],"tags":[]},{"title":"Introduction to Android","slug":"pemrograman/android/0-Introduction-to-Android","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/05/07/pemrograman/android/0-Introduction-to-Android/","link":"","permalink":"http://ciazhar.github.io/2017/05/07/pemrograman/android/0-Introduction-to-Android/","excerpt":"","text":"Sekilas tentang AndroidAndroid merupakan Sistem Operasi untuk mobile. Aplikasi android native sendiri dapat dibangun menggunakan XML(untuk design) dan Java(untuk logic). Pada Tutorial kali ini kita akan coba membuat aplikasi Android native. Roadmap Belajar Android Native Setup Project Android View Java","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Android","slug":"Pemrograman/Android","permalink":"http://ciazhar.github.io/categories/Pemrograman/Android/"}],"tags":[]},{"title":"Routing","slug":"pemrograman/angular2/3-Routing","date":"un55fin55","updated":"un44fin44","comments":true,"path":"2017/04/28/pemrograman/angular2/3-Routing/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular2/3-Routing/","excerpt":"","text":"Laman Web pada umunya untuk berkomunikasi dengan menggunakan hyperlink. Sementara itu untuk berkomunikasi antar komponen, Angular menggunakan routing. Routing hampir seperti mapping di java. Untuk pergi ke komponen lain, jalurnya harus didefinisikan terlebih dahulu.Routing sendiri berdasarkan letaknya dibedakan menjadi 2 yaitu routing Top Level Component dan routing Component pada Module. Routing Top Level Component Sebelum melakukan routing kita akan buat terlebih dahulu membuat top level componentnya yaitu about dan welcome. Struktur foldernya akan menjadi seperti ini 123456789101112131415161718192021222324252627282930313233343536373839404142434445src/app/├── about│ ├── about.component.css│ ├── about.component.html│ ├── about.component.spec.ts│ └── about.component.ts├── app.component.css├── app.component.html├── app.component.spec.ts├── app.component.ts├── app.module.ts├── navbar│ ├── navbar.component.css│ ├── navbar.component.html│ ├── navbar.component.spec.ts│ └── navbar.component.ts├── sidebar│ ├── sidebar.component.css│ ├── sidebar.component.html│ ├── sidebar.component.spec.ts│ └── sidebar.component.ts├── transaksi│ ├── beli│ │ ├── beli.component.css│ │ ├── beli.component.html│ │ ├── beli.component.spec.ts│ │ └── beli.component.ts│ ├── jual│ │ ├── jual.component.css│ │ ├── jual.component.html│ │ ├── jual.component.spec.ts│ │ └── jual.component.ts│ ├── rekap│ │ ├── rekap.component.css│ │ ├── rekap.component.html│ │ ├── rekap.component.spec.ts│ │ └── rekap.component.ts│ └── transaksi.module.ts└── welcome ├── welcome.component.css ├── welcome.component.html ├── welcome.component.spec.ts └── welcome.component.ts Selanjunya import router module (app.module.ts) 1import &#123; RouterModule, Routes &#125; from '@angular/router'; Selanjutnya routing tiap module (app.module.ts) 1234const routingAplikasi: Routes = [ &#123; path: &quot;about&quot;, component: AboutComponent &#125;, &#123; path: &quot;**&quot;, component: WelcomeComponent &#125;] Inisialisasi router (app.module.ts) 12345678@NgModule(&#123; .... imports: [ .... RouterModule.forRoot(routingAplikasi) ], ...&#125;) mapping router ke html(navbar.component.html) 1&lt;li&gt;&lt;a routerLink=\"about\"&gt;Informasi&lt;/a&gt;&lt;/li&gt; (sidebar.component.html)1&lt;li class=\"active\"&gt;&lt;a routerLink=\"welcome\"&gt;Dashboard &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; Menambahkan router outlet yaitu tempat keluarnya konten sehabis di routing.(app.component.html)123456789&lt;app-navbar&gt;&lt;/app-navbar&gt;&lt;div class=\"container-fluid\"&gt; &lt;div class=\"row\"&gt; &lt;app-sidebar&gt;&lt;/app-sidebar&gt; &lt;div class=\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\"&gt; &lt;router-outlet&gt;&lt;/router-outlet&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; Routing Component pada Module import Router module (transaksi.module.ts) 1import &#123; RouterModule, Routes &#125; from '@angular/router'; buat Routes beserta path (transaksi.module.ts) 12345const routingTransaksi : Routes = [ &#123; path: \"transaksi/beli\", component: BeliComponent &#125;, &#123; path: \"transaksi/jual\", component: JualComponent &#125;, &#123; path: \"transaksi/rekap\", component: RekapComponent &#125;] Inisialisasi Routes (transaksi.module.ts) 12345@NgModule(&#123; .... imports: [ RouterModule.forChild(routingTransaksi) ] import TransaksiComponent(app.module.ts) 1import &#123; TransaksiModule &#125; from &apos;./transaksi/transaksi.module&apos;; tambah path untuk routing module(app.module.ts) 1&#123; path: \"transaksi\", redirectTo: \"/transaksi\", pathMatch: \"full\"&#125; Inisialisasi Routes (app.module.ts) 12345@NgModule(&#123; .... imports: [ TransaksiModule, ]","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Component dan Module","slug":"pemrograman/angular2/2-Component-dan-Module","date":"un55fin55","updated":"un44fin44","comments":true,"path":"2017/04/28/pemrograman/angular2/2-Component-dan-Module/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular2/2-Component-dan-Module/","excerpt":"","text":"KomponenKomponen ini dapat digunakan untuk membuat suatu layout atau menu. Contoh komponen yang digunakan sebagai layout yaitu seperti navbar, sidebar dan footer. Ada juga komponen yang digunakan sebagai menu seperti beranda, pengaturan, profil dan sebagainya.Untuk membuat componen dapat menggunakan perintah sebagai berikut :1ng g component NAMA_COMPONENT Sehingga Struktur foldernya akan menjadi seperti :1234567891011app/├── app.component.css├── app.component.html├── app.component.spec.ts├── app.component.ts├── app.module.ts├── NAMA_COMPONENT| ├── NAMA_COMPONENT.component.css| ├── NAMA_COMPONENT.component.html| ├── NAMA_COMPONENT.component.spec.ts| └── NAMA_COMPONENT.component.ts Membuat ModuleModule ini seperti package atau folder. Dia berfungsi untuk menampung beberapa component yang memiliki fungsi yang sama. Analoginya seperti suatu transaksi memiliki aksi seperti jual, beli &amp; rekap. Transaksi merupakan modulenya dan jual beli &amp; rekap adalah componentnya.Untuk membuat module dapat menggunakan perintah sebagai berikut :1ng g module NAMA_MODULE Setelah itu struktur foldernya akan seperti berikut12345678910111213app/├── app.component.css├── app.component.html├── app.component.spec.ts├── app.component.ts├── app.module.ts├── NAMA_COMPONENT│ ├── NAMA_COMPONENT.component.css│ ├── NAMA_COMPONENT.component.html│ ├── NAMA_COMPONENT.component.spec.ts│ └── NAMA_COMPONENT.component.ts└── NAMA_MODULE └── NAMA_MODULE.module.ts Kemudian kita buat beberapa component di dalamnya sehingga sebagai berikut12345678910111213141516171819202122232425262728app/├── app.component.css├── app.component.html├── app.component.spec.ts├── app.component.ts├── app.module.ts├── NAMA_COMPONENT│ ├── NAMA_COMPONENT.component.css│ ├── NAMA_COMPONENT.component.html│ ├── NAMA_COMPONENT.component.spec.ts│ └── NAMA_COMPONENT.component.ts└── NAMA_MODULE ├── NAMA_COMPONENT1 │ ├── NAMA_COMPONENT1.component.css │ ├── NAMA_COMPONENT1.component.html │ ├── NAMA_COMPONENT1.component.spec.ts │ └── NAMA_COMPONENT1.component.ts ├── NAMA_COMPONENT2 │ ├── NAMA_COMPONENT2.component.css │ ├── NAMA_COMPONENT2.component.html │ ├── NAMA_COMPONENT2.component.spec.ts │ └── NAMA_COMPONENT2.component.ts ├── NAMA_COMPONENT3 │ ├── NAMA_COMPONENT3.component.css │ ├── NAMA_COMPONENT3.component.html │ ├── NAMA_COMPONENT3.component.spec.ts │ └── NAMA_COMPONENT3.component.ts └── NAMA_MODULE.module.ts NAMA_COMPONENT1, NAMA_COMPONENT2 dan NAMA_COMPONENT3 merupakan component dari NAMA_MODULE. Sedangkan NAMA_COMPONENT dikenal sebagai top level component.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Setup Project Angular2","slug":"pemrograman/angular2/1-Setup-Project-Angular2","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/04/28/pemrograman/angular2/1-Setup-Project-Angular2/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular2/1-Setup-Project-Angular2/","excerpt":"","text":"Menginstall NodeUntuk menginstall node saya menyarankan menggunakan tutorial dari Digital Ocean dengan menggunakan nvm. Menginstall npmUntuk menginstall npm cukup tulis kode berikut pada terminal anda (khusus untuk ubuntu):1sudo apt install npm Atau apabila anda menggunakan Sistem Operasi yang lain anda bisa mencarinya di internet. Menginstall Angular CLIAngular ini adalah salah satu tools untuk membuat aplikasi angular2. Untuk menggunakanya cukup tulis kode berikut pada terminal anda :1npm install -g @angular/cli Membuat Project Angular21ng new NAMA_PROJECT Setelah itu akan dibuat struktur folder sebagai berikut :1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374NAMA_FOLDER/├── .git│ ├── branches│ ├── COMMIT_EDITMSG│ ├── config│ ├── description│ ├── HEAD│ ├── hooks│ │ ├── applypatch-msg.sample│ │ ├── commit-msg.sample│ │ ├── post-update.sample│ │ ├── pre-applypatch.sample│ │ ├── pre-commit.sample│ │ ├── prepare-commit-msg.sample│ │ ├── pre-push.sample│ │ ├── pre-rebase.sample│ │ └── update.sample│ ├── index│ ├── info│ │ └── exclude│ ├── logs│ │ ├── HEAD│ │ └── refs│ │ └── heads│ │ └── master│ ├── objects│ │ ├── 82│ │ │ └── e3a754b6a0fcb238b03c0e47d05219fbf9cf89│ │ ├── e6│ │ │ └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391│ │ ├── f1│ │ │ └── 65300d6c67d5599ceb9b0ed355c2a8cbe336bf│ │ ├── info│ │ └── pack│ └── refs│ ├── heads│ │ └── master│ └── tags├── .gitignore└── NAMA_PROJECT ├── .angular-cli.json ├── e2e │ ├── app.e2e-spec.ts │ ├── app.po.ts │ └── tsconfig.e2e.json ├── .editorconfig ├── .gitignore ├── karma.conf.js ├── package.json ├── protractor.conf.js ├── README.md ├── src │ ├── app │ │ ├── app.component.css │ │ ├── app.component.html │ │ ├── app.component.spec.ts │ │ ├── app.component.ts │ │ └── app.module.ts │ ├── assets │ │ └── .gitkeep │ ├── environments │ │ ├── environment.prod.ts │ │ └── environment.ts │ ├── favicon.ico │ ├── index.html │ ├── main.ts │ ├── polyfills.ts │ ├── styles.css │ ├── test.ts │ ├── tsconfig.app.json │ ├── tsconfig.spec.json │ └── typings.d.ts ├── tsconfig.json └── tslint.json Pada Project tersebut terdapat beberapa file yaitu : angular-cli.json. File ini berisi konfigurasi dari tools angular cli. package.json. File ini digenerate untuk setiap project yang menggunakan npm. Berisi konfigurasi dependency/library. tsconfig.json. File ini berisi konfigurasi untuk typscript compiler. Terdapat emitDecoratorMetadata yang digunakan memproses decorator dimana fungsinya sama dengan anotation pada spring framework. Decorator berfungsi untuk mengkonversi Typescript ke Javascript. Terdapat juga module yang berisi module systemnya. Terdapat juga target untuk outputnya nanti menjadi apa. Terdapat juga moduleResolution untuk system modulnya. Terdapat juga outDir untuk compilenya kemana. Terdapat juga sourceMap untuk mapping hasil compile ke sourcecode aslinya. node_module. Folder ini merupakan repository local yang berisi dependency yang telah didownload. index.html. File ini merupaka html indexnya. Angular2 ini menggenerate Single Page Aplication. Jadi file html cuma 1 dan yang lainya JS. main.ts. File ini merupaka main class nya. style.css. File css untuk global. app. Folder yang berisi sourcecode. Di folder ini terdapat beberapa file yaitu .css untuk cssnya, .html untuk templatenya, .spec.ts untuk testing, .ts untuk konfigurasi template dan ts, module.ts untuk modulenya (kalo di java seperti package). Running ProjectUntuk running project dapat gunakan code berikut pada terminal12cd NAMA_PROJECTng serve Hasilnya dapat anda lihat di browser pada localhost:4200. Build ProjectUntuk running project dapat gunakan code berikut pada terminal1ng serve Hasilnya dapat anda lihat pada folder dist Flow Angular2 main.ts akan dijalankan pertama kali. Di main.ts sendiri dia mengimport app.module.ts melalui koding import { AppModule } from &#39;./app/app.module&#39;;. Selain itu main.ts juga membootrap app.module.ts melalui koding platformBrowserDynamic().bootstrapModule(AppModule); Selanjutnya app.module.ts. Di app.module.ts dia terdapat declaration yang berisi kelas-kelas apa saja yang ada di modul ini. Selanjutnya ada import yang berisi kelas-kelas apa saja yang diimport. Selanjutnya ada bootstrap yang digunakan untuk menjalankan file (yaitu AppComponent). Selanjutnya app.component.ts. Di app.component.ts terdapat selector yang digunakan untuk tag pada html. Jadi dia akan mencari tag di html (yaitu app-root), apabila ada maka dia akan menginjectkan templatenya ke dalam tag tersebut. Templatenya sendiri berasa dari templateUrl. Selanjutnya app.component.html. Di app.component.html apabila ada variabel maka dia akan mengambilnya dari app.component.ts bagian export. Install BootstrapStep ini optional karena untuk css bisa pake framework yang lain atau menginputkan sendiri cssnya. Step ini hanya untuk mempermudah saja.Untuk menginstallnya dapat menggunakan kode1npm install ng2-bootstrap bootstrap --save Setelah itu includekan bootstrapnya ke file angular-cli.json.1234\"styles\": [ \"styles.css\", \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"], Arsitektur Aplikasi Angular2Arsitekturnya kurang lebih seperti berikut123456Aplikasi├── Top Level Component├── Module ├── Component |── File Typescript/JS |── File HTML Penjelasanya adalah setiap aplikasi terdiri dari satu atau lebih Component. Module yang tersusun dari satu atau lebih Component. Component sendiri dibuat berdasarkan file Typescript dan HTML. Berikut contoh sederhananya:12345678910Aplikasi Tabungan Emas├── Sidebar Component│ ├── Informasi Rekening│ ├── Transaksi Emas│ │ ├── Form│ │ ├── Rekap├── Navbar Component│ ├── Settings│ ├── Profile│ ├── Help","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Introduction to Angular2","slug":"pemrograman/angular2/0-Introduction-to-Angular2","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/04/28/pemrograman/angular2/0-Introduction-to-Angular2/","link":"","permalink":"http://ciazhar.github.io/2017/04/28/pemrograman/angular2/0-Introduction-to-Angular2/","excerpt":"","text":"Sekilas tentang AngularAngular merupakan framework untuk membangun aplikasi frontend web, desktop dan mobile. Angular sendiri pada awalnya berbasis bahasa pemrograman Javascript tetapi kemudian mulai versi 2 keatas ditambahkan untuk bahasa pemrograman Typescript(https://www.typescriptlang.org/). Pada Tutorial kali ini kita akan coba membuat aplikasi angular berbasis frontend web. Roadmap Belajar Angular Setup Project Angular Component dan Module Routing Top Level Conponent [Routing Module]","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Angular","slug":"Pemrograman/Angular","permalink":"http://ciazhar.github.io/categories/Pemrograman/Angular/"}],"tags":[]},{"title":"Jasper Report","slug":"pemrograman/spring/6-jasper-report","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/04/23/pemrograman/spring/6-jasper-report/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/6-jasper-report/","excerpt":"","text":"Tambahkan dependency 12345678910111213141516171819&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.github.jpenren&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-spring-data-dialect&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt; &lt;artifactId&gt;jasperreports&lt;/artifactId&gt; &lt;version&gt;6.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi&lt;/artifactId&gt; &lt;version&gt;3.10.1&lt;/version&gt; &lt;/dependency&gt; Membuat file .jrxml menggunakan Jaspersoft Studio Copy file ke resource/reports tambahkan bean JasperReportsViewResolver ke konfigurasiweb12345678910@Bean public JasperReportsViewResolver getJasperReportsViewResolver()&#123; JasperReportsViewResolver resolver = new JasperReportsViewResolver(); resolver.setPrefix(\"classpath:/reports/\"); resolver.setSuffix(\".jrxml\"); resolver.setViewNames(\"report_*\"); resolver.setViewClass(JasperReportsMultiFormatView.class); resolver.setOrder(0); return resolver; &#125; buat controllernya1234567891011121314151617181920@Controllerpublic class BugReportController &#123; @Autowired private BugDao dao; @RequestMapping(\"/bug\") public ModelAndView generateAllBugReport(ModelAndView m, @RequestParam(value = \"format\", required = false) String format)&#123; Iterable&lt;Bug&gt; data = dao.findAll(); m.addObject(\"dataSource\", data); m.addObject(\"tanggalUpdate\", new Date()); m.addObject(\"format\", \"pdf\"); if(format != null &amp;&amp; !format.isEmpty())&#123; m.addObject(\"format\", format); &#125; m.setViewName(\"report_bug\"); return m; &#125;&#125;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Thymeleaf","slug":"pemrograman/spring/5-layout-dengan-thymeleaf","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/5-layout-dengan-thymeleaf/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/5-layout-dengan-thymeleaf/","excerpt":"","text":"Layout dengan Thymeleaf Thymeleaf adalah template engine untuk JVM. Dia support HTMl, XML, TEXT, CSS, JS, dan RAW. Thymeleaf emmpunya kemampuan yang dikenal dengan Natural Template yaitu dimana kita dapat membuat 2 buah value yang sama. Hal ini mempermudah antara designer dan programer agar dapat bekerja bersama. Ketika value dari backed belum ada designer dapat menggunakan value html. 1&lt;input type=\"text\" name=\"userName\" value=\"James Carrot\" th:value=\"$&#123;user.name&#125;\" /&gt; Menggunakan Thymeleaf Tambahkan xmlns dibawah ini pada tag html 1&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; Expression di Thymeleaf Menampilkan pesan menggunakan #{}Contoh Menampilkan nama user yang sedang online 1&lt;p th:utext=\"#&#123;home.welcome($&#123;session.user.name&#125;)&#125;\"&gt; Menampilkan variabel menggunakan ${}contoh menggunakan th:each: 123456789&lt;tr th:each=\"pesertas : $&#123;peserta&#125;\"&gt; &lt;td th:text=\"$&#123;pesertas.nama&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.email&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.noHp&#125;\"&gt;&lt;/td&gt; &lt;td&gt; &lt;a th:href=\"$&#123;'/peserta/edit/'+pesertas.id&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-edit\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;a th:href=\"$&#123;'/peserta/hapus/'+pesertas.id&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt;&lt;/tr&gt; Menampilkan link url menggunakan @{}.Contoh url dapat berasal dari mapping controller : 1&lt;a th:href=\"@&#123;/peserta&#125;\"&gt;Daftar Peserta&lt;/a&gt; Contoh url dapat berasal dari default folder : 1&lt;link th:href=\"@&#123;/css/bootstrap.min.css&#125;\" rel=\"stylesheet\" /&gt; Template Inheritance Template Inheritance dapat menggunakan 1&lt;div layout:fragment=\"content\"&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Otorisasi Login dengan spring security","slug":"pemrograman/spring/4-otorisasi-login-dengan-spring-security","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/4-otorisasi-login-dengan-spring-security/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/4-otorisasi-login-dengan-spring-security/","excerpt":"","text":"Bikin Otorisasi Login Tambahkan dependency (pom.xml) 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt; Bikin KonfigurasiSecurity (main/java/domain/config/KonfigurasiSecurity.java) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter&#123; private static final String SQL_LOGIN = \"SELECT username,password, enable \" + \"FROM s_users WHERE username = ?\"; private static final String SQL_PERMISSION = \"SELECT u.username, r.nama as authority \" + \"FROM s_users u \" + \"JOIN s_user_role ur on u.id = ur.id_user \" + \"JOIN s_roles r on ur.id_role = r.id \" + \"WHERE u.username = ?\"; @Autowired private DataSource dataSource; @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception&#123; //setting security non database auth .inMemoryAuthentication() .withUser(\"ciazhar\") .password(\"123\") .roles(\"apa\"); ///Setting security database /*auth .jdbcAuthentication() .dataSource(dataSource) .usersByUsernameQuery(SQL_LOGIN) .authoritiesByUsernameQuery(SQL_PERMISSION);*/ &#125; ///konfigurasi web mana yg boleh diakses admin staf user dll protected void configure(HttpSecurity http) throws Exception&#123; http .authorizeRequests() .antMatchers(\"/css/**\",\"/js/**\").permitAll() .anyRequest().authenticated() .and() .formLogin() .loginPage(\"/login\") .defaultSuccessUrl(\"/\") .permitAll() .and() .logout(); &#125;&#125; Register UI(src/main/java/domain/config/KonfigurasiWeb.java)Karena form login kita tidak menggunakan controller, maka harus didaftarkan terlebih dahulu. 123456789@Configurationpublic class KonfigurasiWeb extends WebMvcConfigurerAdapter&#123; @Override public void addViewControllers(ViewControllerRegistry registry)&#123; registry.addViewController(\"/login\").setViewName(\"login\"); registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\"); &#125;&#125; Bikin UI Login(main/resources/login.html) 123456789101112131415161718192021222324252627282930313233343536373839&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; &lt;head&gt; &lt;title&gt;Log In&lt;/title&gt; &lt;!-- Bootstrap core CSS --&gt; &lt;link th:href=\"@&#123;/css/bootstrap.min.css&#125;\" rel=\"stylesheet\" /&gt; &lt;link th:href=\"@&#123;/css/bootstrap-theme.min.css&#125;\" rel=\"stylesheet\" /&gt; &lt;link th:href=\"@&#123;/css/signin.css&#125;\" rel=\"stylesheet\" /&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;form name=\"f\" class=\"form-signin\" th:action=\"@&#123;/login&#125;\" method=\"post\"&gt; &lt;div th:if=\"$&#123;param.error&#125;\" class=\"alert alert-error\"&gt; Invalid username and password. &lt;/div&gt; &lt;div th:if=\"$&#123;param.logout&#125;\" class=\"alert alert-success\"&gt; You have been logged out. &lt;/div&gt; &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt; &lt;label for=\"username\" class=\"sr-only\"&gt;Username&lt;/label&gt; &lt;input type=\"text\" name=\"username\" id=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"true\" autofocus=\"true\" /&gt; &lt;label for=\"password\" class=\"sr-only\"&gt;Password&lt;/label&gt; &lt;input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"true\" /&gt; &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt; &lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Kardinalitas","slug":"pemrograman/spring/3.4-kardinalitas","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/04/23/pemrograman/spring/3.4-kardinalitas/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/3.4-kardinalitas/","excerpt":"","text":"","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"CRUD dengan Content digenerate di Client Side Menggunakan Spring Data JPA dan AngularJS","slug":"pemrograman/spring/3.3-generate-content-dari-client-side-dengan-AngularJS","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/3.3-generate-content-dari-client-side-dengan-AngularJS/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/3.3-generate-content-dari-client-side-dengan-AngularJS/","excerpt":"","text":"Memulai AngularJS Membuat file html (src/main/resources/templates/materi/listMateri.html) 12345678910&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Daftar Materi&lt;/title&gt; &lt;/head&gt; &lt;body ng-app=\"\"&gt; &lt;h1&gt;Daftar Materi&lt;/h1&gt; &lt;script th:src=\"@&#123;/js/angular.min.js&#125;\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Register view(src/main/java/domain/config/KonfigurasiWeb) 1registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\"); Binding Binding yaitu menggunakan data input untuk di outputkan secara dinamis(tanpa submit/client side). Prosesnya adalah user menginputkan data. Kemudian data itu disimpan ke sebuah variabel. Kemudian variabel itu dioutputkan lagi. Contoh 123456&lt;body ng-app=\"\"&gt; Nama anda : &lt;input type=\"text\" ng-model=\"nama\"/&gt; Selamat datang &#123;&#123;nama&#125;&#125; &lt;script th:src=\"@&#123;/js/angular.min.js&#125;\"&gt;&lt;/script&gt;&lt;/body&gt; Menggunakan $scope$scope digunakan untuk menghubungkan variabel di html dengan javascript. Mencetak data Array (src/main/resources/templates/materi/listMateri.html) 123456789&lt;div ng-controller=\"MateriController\"&gt; Input Materi &lt;input type=\"text\" ng-model=\"namaMateri\"/&gt;&lt;br/&gt; Materi &#123;&#123;namaMateri&#125;&#125; berhasil diinput. &lt;ul&gt; &lt;li ng-repeat=\"materi in daftarMateri\"&gt;&#123;&#123;materi&#125;&#125;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script th:src=\"@&#123;/js/materi.js&#125;\"&gt;&lt;/script&gt; Membuat file JS(/src/main/resources/static/js/materi.js) 1234567var materiapp = angular.module ('materiapp',[]);materiapp.controller('MateriController', function($scope)&#123; $scope.daftarMateri = [ 'Java Fundamental', 'Spring Framework' ];&#125;); Memasukkan Data ke Array (src/main/resources/templates/materi/listMateri.html) 1&lt;button ng-click=\"tambahMateri()\"&gt;Tambahkan&lt;/button&gt; (/src/main/resources/static/js/materi.js) 123$scope.tambahMateri = function()&#123; $scope.daftarMateri.push($scope.namaMateri);&#125; Menghapus Data dari Array (src/main/resources/templates/materi/listMateri.html) 1&lt;button ng-click=\"tambahMateri()\"&gt;Tambahkan&lt;/button&gt; (/src/main/resources/static/js/materi.js) 123$scope.tambahMateri = function()&#123; $scope.daftarMateri.push($scope.namaMateri);&#125; - Generate daftar Materi membuat controller 12345678910@RestController@RequestMapping(\"/api\")public class MateriApiController &#123; @Autowired private MateriDao md; @RequestMapping(value = \"/materi\", method = RequestMethod.GET) public Page&lt;Materi&gt; daftarMateri(Pageable page)&#123; return md.findAll(page); &#125;&#125; Keteranga :Karena kita menggunakan RestController maka hasil output akan berupa rest(biasanya json). javascript 123456789101112131415161718materiapp.controller('GenerateMateriController', function($http, $scope)&#123; $scope.daftarMateri = &#123;&#125;; $scope.listMateri = function()&#123; $http.get('/api/materi').then(sukses,gagal); function sukses(response)&#123; $scope.daftarMateri = response.data; console.log($scope.daftarMateri); &#125;; function gagal(response)&#123; console.log(response); alert('Error'+response); &#125;; &#125;; $scope.listMateri();&#125;); Keterangan:Kita membuat controller baru dengan nama GenerateMateriController. Lalu kita membuat daftarMateri sebagai penampung data json yang akan kita dapat dari /api/materi menggunakan fungsi listMateri. html 12345678910111213141516&lt;div ng-controller=\"GenerateMateriController\"&gt; &lt;table border=\"1\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;td&gt;Nama&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr ng-repeat= \"materi in daftarMateri.content\"&gt; &lt;td&gt;&#123;&#123;materi.kode&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;materi.nama&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; Keterangan :membuat div yang telah diinjek dengan GenerateMateriController. kemudian menggenerate materi dari daftarMateri menggunakan ng-repeat. Menghapus materi membuat fungsi hapus (javascript) 12345678910$scope.hapusMateri = function(materi)&#123; $http.delete('/api/materi/'+materi.id).then(sukses, gagal); function sukses(response)&#123; $scope.listMateri(); &#125; function gagal(response)&#123; console.log(response); alert('Error : '+response); &#125;; &#125;; menambahkan button hapus (html) 1&lt;td&gt;&lt;button ng-click=\"hapusMateri(materi)\"&gt;hapus&lt;/button&gt;&lt;/td&gt; Menyimpan materi membuat fungsi simpan (javascript) 12345678910$scope.simpanMateri = function()&#123; $http.post('/api/materi', $scope.materi).then(sukses,gagal); function sukses(response)&#123; $scope.listMateri(); &#125; function gagal(response)&#123; console.log(response); alert('Error : '+response); &#125;;&#125;; menambahkan form input (html) 1234567891011121314151617&lt;table&gt; &lt;tr&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" ng-model=\"materi.kode\" required=\"true\"/&gt;&lt;/td&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Nama&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" ng-model=\"materi.nama\" required=\"true\"/&gt;&lt;/td&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&lt;button ng-click=\"simpanMateri()\"&gt;Simpan&lt;/button&gt;&lt;/td&gt; &lt;td&gt;Kode&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"CRUD dengan Content digenerate di Server Side Menggunakan Spring Data JPA dan Thymeleaf","slug":"pemrograman/spring/3.2-generate-content-dari-server-side-dengan-thymeleaf","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/3.2-generate-content-dari-server-side-dengan-thymeleaf/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/3.2-generate-content-dari-server-side-dengan-thymeleaf/","excerpt":"","text":"Membuat controller (src/main/java/domain/controller/PesertaPagingController.java) 12345678910111213141516171819202122232425262728293031323334353637@Controller@RequestMapping(\"/peserta\")public class PesertaPagingController &#123; @Autowired PesertaPagingDao pesertaPagingDao; @RequestMapping(\"/list\") public String listPeserta(ModelMap modelMap)&#123; modelMap.put(\"peserta\",pesertaPagingDao.findAll()); return \"/peserta/list\"; &#125; @RequestMapping(value = \"/form\", method = RequestMethod.GET) public void tampilkanForm( @RequestParam(required = false, name = \"id\") PesertaPaging peserta, ModelMap mm)&#123; if(peserta != null)&#123; mm.addAttribute(\"peserta\", peserta); &#125; else &#123; mm.addAttribute(\"peserta\", new PesertaPaging()); &#125; &#125; @RequestMapping(value = \"/form\", method = RequestMethod.POST) public String prosesForm(@ModelAttribute @Valid PesertaPaging p, BindingResult hasilValidasi)&#123; if(hasilValidasi.hasErrors())&#123; return \"/peserta/form\"; &#125; pesertaPagingDao.save(p); return \"redirect:list\"; &#125; @RequestMapping(value = \"/hapus\") public String hapusPeserta(@RequestParam(name = \"id\")String id,ModelMap modelMap)&#123; pesertaPagingDao.delete(id); return \"redirect:list\"; &#125;&#125; Membuat UI (src/main/resources/templates/peserta/list.html) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;title&gt;Aplikasi Spring Boot&lt;/title&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/bootstrap.min.css&#125;\" media=\"screen\"/&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/starter-template.css&#125;\" media=\"screen\"/&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class=\"navbar navbar-inverse navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" th:href=\"@&#123;/&#125;\"&gt;ciazhar&lt;/a&gt; &lt;/div&gt; &lt;div id=\"navbar\" class=\"collapse navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt;&lt;a th:href=\"@&#123;/peserta&#125;\"&gt;Daftar Peserta&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!--/.nav-collapse --&gt; &lt;/div&gt;&lt;/nav&gt;&lt;div class=\"container\"&gt; &lt;h1&gt;Daftar Peserta&lt;/h1&gt; &lt;div th:if=\"$&#123;not #lists.isEmpty(peserta)&#125;\"&gt; &lt;table class=\"table table-striped\"&gt; &lt;tr&gt; &lt;th&gt;Nama&lt;/th&gt; &lt;th&gt;Email&lt;/th&gt; &lt;th&gt;No Hp&lt;/th&gt; &lt;th&gt;Action&lt;/th&gt; &lt;/tr&gt; &lt;tr th:each=\"pesertas : $&#123;peserta&#125;\"&gt; &lt;td th:text=\"$&#123;pesertas.nama&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.email&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;pesertas.noHp&#125;\"&gt;&lt;/td&gt; &lt;td&gt; &lt;a th:href=\"@&#123;/peserta/form(id=$&#123;pesertas.id&#125;)&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-edit\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;a th:href=\"@&#123;/peserta/hapus(id=$&#123;pesertas.id&#125;)&#125;\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;a class=\"btn btn-default\" th:href=\"@&#123;/peserta/form&#125;\"&gt;New&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt;&lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Membuat UI (src/main/resources/templates/peserta/form.html) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;&lt;head&gt; &lt;title&gt;Aplikasi Spring Boot&lt;/title&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/bootstrap.min.css&#125;\" media=\"screen\"/&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/starter-template.css&#125;\" media=\"screen\"/&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class=\"navbar navbar-inverse navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" th:href=\"@&#123;/&#125;\"&gt;ciazhar&lt;/a&gt; &lt;/div&gt; &lt;div id=\"navbar\" class=\"collapse navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt;&lt;a th:href=\"@&#123;/peserta&#125;\"&gt;Daftar Peserta&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!--/.nav-collapse --&gt; &lt;/div&gt;&lt;/nav&gt;&lt;div class=\"container\"&gt; &lt;h1&gt;Form Peserta&lt;/h1&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-sm-8\"&gt; &lt;form class=\"form-horizontal\" th:object=\"$&#123;peserta&#125;\" th:action=\"@&#123;/peserta/form&#125;\" method=\"post\"&gt; &lt;input type=\"hidden\" th:field=\"*&#123;id&#125;\"/&gt; &lt;div class=\"form-group\"&gt; &lt;label class=\"col-sm-2 control-label\"&gt;Nama:&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"text\" class=\"form-control\" th:field=\"*&#123;nama&#125;\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label class=\"col-sm-2 control-label\"&gt;Email:&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"email\" class=\"form-control\" th:field=\"*&#123;email&#125;\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label class=\"col-sm-2 control-label\"&gt;Nomer HP:&lt;/label&gt; &lt;div class=\"col-sm-10\"&gt; &lt;input type=\"text\" class=\"form-control\" th:field=\"*&#123;noHp&#125;\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;button type=\"submit\" class=\"btn btn-deffault\"&gt;Simpan&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt;&lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Setup Project Untuk CRUD","slug":"pemrograman/spring/3.0-setup-project-crud","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/3.0-setup-project-crud/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/3.0-setup-project-crud/","excerpt":"","text":"Setup Project untuk CRUDPada tutorial kali ini kita akan melakukan Create Read Update Delete (CRUD) menggunakan Spring Data JPA. Kita akan menggunakan mysql untuk databasenya, jadi anda harus menginstallnya terlebih dahulu.Berikut ini merupakan langkah-langkahnya : Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;6.0.6&lt;/version&gt;&lt;/dependency&gt; Untuk mencari dependency dapat dilihat di Maven Repostory Setting Database (main/resources/application.properties)123spring.datasource.url=jdbc:mysql://localhost:3306/pelatihanspring.datasource.username=pelatihanuserspring.datasource.password=pelatihanpasswd Keterangan : spring.datasource.url merupakan url untuk database. Dalam pengisianya harap disesuaikan dengan jenis database, port pada perangkat, dan nama database yang telah dibuat. Pada contoh tersebut menggunakan jenis database (mysql), port pada perangkat (3306), dan nama database(pelatihan) spring.datasource.username merupakan username database. spring.datasource.password merupakan password database. Membuat Schema (CLI).Untuk schema tetap harus dibuat manual. Berikut langkah-langkahnya untuk mysql. Login ke mysql. Jika sudah login dapat diabaikan langkah ini. 1mysql -u root -p Memasang otentifikasi database 1grant all on pelatihan.* to pelatihanuser@localhost identified by &apos;pelatihanpasswd&apos; Membuat database 1create database pelatihan; Meggunakan MySQL (CLI)Berikut adalah sintaks yang akan sering digunakan dalam mysql. Menggunakan database 1use pelatihan; Melihat list tabel dalam database 1show tables; Melihat atribut pada tabel secara detail 1show create table nama_tabel \\G Melihat data pada tabel 1select * from nama_tabel Menghapus data pada tabel 1drop table peserta;","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"CRUD dengan Spring Data JPA","slug":"pemrograman/spring/3.1-crud-dengan-spring-data-jpa","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2017/04/23/pemrograman/spring/3.1-crud-dengan-spring-data-jpa/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/3.1-crud-dengan-spring-data-jpa/","excerpt":"","text":"CRUD menggunakan Spring Data JPAUntuk melakukan CRUD, setiap entitas didefinisikan dengan beberapa tahap yaitu : Membuat Model.Di model ini akan terdapat atribut-atribut yang nantinya akan ditrasformasikan menjadi tabel pada Database. Membuat DAO.Dia yang bertugas mendefinisikan metode apa saja yang dibutuhkan oleh Controller. Membuat Controller.Controller ini berfungsi untuk mengatur apa yang akan ditampilkan ke view, apa yang akan disimpan ke database dan melakukan mapping url. Membuat View (List dan Form).View ini akan menjadi apa yang akan dilihat oleh user.Jadi Struktur foldernya akan seperti ini :Struktur foldernya akan seperti berikut :12345678910111213141516src └── main | ├── java | └── com | └── example | ├── DemoApplication.java | ├── controllers | ├── dao | └── model └── resources ├── application.properties ├── static │ ├── css │ ├── fonts │ └── js └── templates CRUD sendiri dapat dibagi menjadi 2 tipe tergantung dimana menggenerate contenya, yaitu client side dan server side. Dalam mengiplementasikanya, bentuk Model dan Dao nya tetap sama, yang membedakan adalah controller dan viewnya saja. Membuat Model Membuat class untuk model 123@Entitypublic class Peserta &#123;&#125; Keterangan :Untuk setiap kelas yang ingin dibuat menjadi model, harus diberi anotasi Entity pada bagian atasnya. Menambahkan atribut 12345678@Entitypublic class Peserta &#123; private String id; private String nama; private String email; private String noHp;&#125; Menambahkan validasi tiap atribut 123456789101112131415161718192021222324@Entity @Table(name = \"tabel_peserta\")public class Peserta &#123; @Id @GeneratedValue(generator = \"uuid\") @GenericGenerator(name = \"uuid\", strategy = \"uuid2\") private String id; @Column(nullable=false) @NotNull @NotEmpty @Size(min = 1, max = 150) private String nama; @Column(nullable=false,unique=true) @Email @NotNull @NotEmpty private String email; @Column(nullable=false,unique=true) @NotNull @NotEmpty private String noHp;&#125; Keterangan :Validasi di spring sendiri menggunkan JSR-303. Setiap variabel dapat didefinisikan secara spesifik menggunakan validasi. Sebagai Table, NotNull, NotEmpty dll. Menambahkan getter dan setter 12345678910111213141516171819202122232425262728293031public String getId() &#123; return id;&#125;public void setId(String id) &#123; this.id = id;&#125;public String getNama() &#123; return nama;&#125;public void setNama(String nama) &#123; this.nama = nama;&#125;public String getEmail() &#123; return email;&#125;public void setEmail(String email) &#123; this.email = email;&#125;public String getNoHp() &#123; return noHp;&#125;public void setNoHp(String noHp) &#123; this.noHp = noHp;&#125; Membuat DAO Membuat interface dao dan menginherit class PagingAndSortingRepository 123public interface PesertaDao extends PagingAndSortingRepository&lt;Peserta, String&gt;&#123;&#125; Keterangan :Dengan menginherit class PagingAndSortingRepository kita dapat menggunakan method yang biasa digunakan untuk CRUD seperti findAll, findOne, save, delete dll. Membuat methode untuk searching (optional) 123456public interface PesertaDao extends PagingAndSortingRepository&lt;Peserta, String&gt;&#123; @Query(value = \"select p from Peserta p where p.kelas.id = ?1 ORDER BY id_kelas\") public Page&lt;Peserta&gt; findByKelasId(String id_kelas, Pageable pageable);&#125; Keterangan :Selain spring sudah mendefinisikan method yang sering digunakan, spring juga memperbolehkan kita untuk membuat method sesuai yang kita inginkan. Sebagai contoh diatas kita membuat Page yang berisi daftar peserta berdasar kelas tertentu. Dalam pembuatanya spring juga memperbolehkan menggunakan query sql atau query jpa.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Membuat Laman Web Sederhana","slug":"pemrograman/spring/2-membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf","date":"un00fin00","updated":"un44fin44","comments":true,"path":"2017/04/23/pemrograman/spring/2-membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/2-membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/","excerpt":"","text":"Pada tutorial sebelumnya kita sudah melakukan setup project spring pada perangkat anda. Sekarang kita akan coba melihat bagaimana aplikasi spring dibuat.Untuk pertama kali kita akan coba membuat laman web sederhana. Langkah-langkahnya adalah sebagai berikut : Membuat controller sederhana (main/java/domain/Controllers/HaloController.java)1234567@Controllerpublic class HaloController&#123; @RequestMapping(\"/\") public String halo()&#123; return \"index\"; &#125;&#125; Keterangan : @Controller digunakan untuk menandai bahwa class HaloController adalah class controller @RequestMapping digunakan untuk melakukan mapping url pada metode bernama halo ke /. Kemudian controller itu akan di tampilkan pada view bernama index. Membuat file HTML (main/resources/templates/index.html)123456789101112131415161718192021222324252627282930&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt; &lt;head&gt; &lt;title&gt;Aplikasi Spring Boot&lt;/title&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/bootstrap.min.css&#125;\" media=\"screen\"/&gt; &lt;link rel=\"stylesheet\" th:href=\"@&#123;/css/signin.css&#125;\" media=\"screen\"/&gt; &lt;/head&gt; &lt;body&gt; &lt;nav class=\"navbar navbar-inverse navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" th:href=\"@&#123;/&#125;\"&gt;ciazhar&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;div class=\"container\"&gt; &lt;h1&gt;Aplikasi Spring Boot Dengan Thymeleaf&lt;/h1&gt; &lt;/div&gt; &lt;script th:src=\"@&#123;/js/jquery.min.js&#125;\"&gt;&lt;/script&gt; &lt;script th:src=\"@&#123;/js/bootstrap.min.js&#125;\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Keterangan : &lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; menandai bahwa html itu menggunakan template engine thymeleaf th:href (jika di html bernama href) digunakan untuk menginjek css. css tersebut dapat di simpan di src/main/resources/static/css. Tetapi karena src/main/resources/static merupakan classpath maka untuk menginjeknya hanya perlu dari folder css saja. contoh : &lt;link rel=&quot;stylesheet&quot; th:href=&quot;@{/css/bootstrap.min.css}&quot; media=&quot;screen&quot;/&gt;Selain itu kita juga dapat menggunakanya untuk melakukan link sesuai mapping di controller. contoh : &lt;a class=&quot;navbar-brand&quot; th:href=&quot;@{/}&quot;&gt;ciazhar&lt;/a&gt; th:src(jika di html bernama src) digunakan untuk menginjek js. js tersebut dapat di simpan di src/main/resources/static/js. contoh : &lt;script th:src=&quot;@{/js/jquery.min.js}&quot;&gt;&lt;/script&gt; Memasang Library (/src/main/resources)Jika kita lihat pada html diatas kita memerlukan beberapa library yaitu bootstrap dan jquery. Library tersebut dapat anda download di official masing-masing library tersebut. Kemudian masukkan ke /src/main/resources/css untuk file CSS dan /src/main/resources/js untuk file JS.","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Setup Project Spring","slug":"pemrograman/spring/1-setup-project","date":"un00fin00","updated":"un44fin44","comments":true,"path":"2017/04/23/pemrograman/spring/1-setup-project/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/1-setup-project/","excerpt":"","text":"Setup Development EnvironmentUntuk menggunakan Spring Boot anda perlu menginstall beberapa Development Environment. Diantaranya adalah : Java Development Kit (JDK atau openJDK) Build Tools (Apache Maven atau Gradle) IDE (IntellijIDEA atau Netbeans) Setup Project Mengunakan Spring Initializer Buka browser lalu masukkan url http://start.spring.io/ Selanjutnya anda akan diminta untuk mengisi beberapa data yaitu : Tipe Project. Project dapat berupa maven atau gradle. Isi dengan Build tools yang sudah anda install di komputer anda. Versi Spring. Pilih versi terbaru yang bukan SNAPSHOOT. Project Metadata. Format pengisianya adalah sebagai berikut :Group : com.nama.domain.anda (dipisah dengan titik)Artifact : nama-aplikasi-anda (tidak boleh diberi spasi) Dependencies. Isi dengan library yang anda butuhkan. Pada tutorial ini kita kan menggunakan Thymeleaf dan Web. Generate Project Add project ke text editor Struktur Folder Aplikasi Spring BootStruktur foldernya akan seperti berikut :12345678910111213141516171819demo├── mvnw├── mvnw.cmd├── pom.xml└── src ├── main │ ├── java │ │ └── com │ │ └── example │ │ └── DemoApplication.java │ └── resources │ ├── application.properties │ ├── static │ └── templates └── test └── java └── com └── example └── DemoApplicationTests.java Sebagai catatan struktur folder tersebut dapat berubah sesuai data yang anda masukkan saat membuat project.Anda dapat menghapus mvnw dan mvn.cmd. Pada Project tersebut terdapat beberapa file yaitu : pom.xml. File ini merupakan konfigurasi dari Maven. Jika anda menggunakan Gradle maka yang dibuat adalah file .gradle. Di dalam folder src/main/java/com/example terdapat file DemoApplication.java. File ini merupakan main file dari aplikasi spring boot anda. Folder src/main/java/com/example sendiri digunakan untuk menampung file-file java. Di dalam folder src/main/resources terdapat file application.properties. File ini digunakan untuk mengkonfigurasi aplikasi spring. Folder src/main/respurces/static digunakan untuk menampung file static (hmtl, css dan js) Folder src/main/respurces/templates digunakan untuk menampung file html yang menggunakan Thymeleaf. Folder src/test/java/com/example digunakan untuk menampung file-file testing. Running ProjectUntuk menjalankan project dapat menggunakan perintah berikut pada CLI1mvn clean spring-boot:run","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Android","slug":"pemrograman/android/1-view","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/04/23/pemrograman/android/1-view/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/android/1-view/","excerpt":"","text":"Android for BeginnerLayoutingViewPengertian ViewView pada dasarnya adalah sebuah kotak yang berisi berbagai macam konten. Konten tersebut dapat berupa kalimat gambar, tulisan tombol dan sebagainya. Macam - macam view berdasar kontenya Text View Image View Button Dalam menuliskan pemrograman, kita diharuskan untuk menulis kode program sebagai instruksi yang spesifik dan detail. IDE (Integrated Development Environment) merupakan suatu ruang kerja berupa perangkat lunak yang digunakan untuk menulis kode program. IDE yang biasa digunakan untuk menulis kode program android adalah Android Studio. Bahasa yang digunakan untuk membuat view pada Android berupa XML. Untuk menulis kode xml anda dapat menggunakan https://udacity.github.io/android-layout. Kode XML digambarkan sebagai berikut : 1234567&lt;TextView android:text=\"Ini Text\" android:textColor=\"@android:color/white\" android:background=\"@android:color/black\" android:layout_width=\"200dp\" android:layout_height=\"300dp\"/&gt; Kode tersebut memiliki ketentuan yaitu : Kode program ditulis di dalam tag. Tag didefinisikan dengan &lt;&gt; (kurung siku). Terdapat 2 tag yaitu tag pembuka dan tag penutup. Perbedaan antara tag pembuka dan tag penutup terdapat tanda /(garis miring).123&lt;TextView ...../&gt; Tag juga bisa didefinisikan seperti berikut :123&lt;TextView&gt; ....&lt;/TextView&gt; Terdapat nama tag yang mewakili view yang ingin dipakai. Dalam contoh diatas nama tag adalah TextView. Terdapat atribut(-atribut) yang digunakan untuk mengcustom view tersebut. Semisal untuk konten, warna tinggi dll. Setiap atribut memiliki nilai. Nilai mewakili apa yang akan dicustom pada setiap atribut. Nilai tersebut dipisahkan dari atributnya oleh tanda = (samadengan) dan ditulis di dalam &quot;&quot; (tanda petik dua). Text ViewMacam macam atribut untuk text view : Menulis text 123&lt;TextView android:text=\"tulis text anda di sini\"/&gt; Mengatur tinggi dan lebar layout 1234&lt;TextView android:height_layout=\"300dp\" android:width_layout=\"300dp\"/&gt; Satuan panjang (untuk panjang, tinggi dll) biasanya didefinisikan dengan satuan dp.Atau untuk membuatnya menyesuaikan lebar dan tinggi text, anda dapat menggunakan mengisi nilainya dengan wrap_content.1234&lt;TextView android:height_layout=\"wrap_content\" android:width_layout=\"wrap_content\"/&gt; Mengganti warna text 12345&lt;TextView android:textColor=\"@android:color/white\" atau android:textColor=\"#Kode_hexa_desimal\"/&gt; Mengganti ukuran font 123&lt;TextView android:textSize=\"30sp\"/&gt; Satuan ukuran font didefinisikan dengan sp. Ukuran font dapat juga didefinisikan sebagai berikut : 12345&lt;TextView android:textAppearance=\"?android:textAppearanceLarge\" android:textAppearance=\"?android:textAppearanceMedium\" android:textAppearance=\"?android:textAppearanceSmall\"/&gt; Referensi untuk design dapat dilihat di Material Design Spec atau google+ #AndroidDev #Protip Image viewMacam-macam atribut untuk Image View : Memilih gambar dari resource/assets: 123&lt;ImageView android:src=\"@drawable/ocean\"/&gt; Mengatur tinggi dan lebar layout 1234&lt;TextView android:height_layout=\"300dp\" android:width_layout=\"300dp\"/&gt; Mengatur posisi dan skala gambar 12345&lt;ImageView android:scaleType=\"centerCrop\" atau android:scaleType=\"center\"/&gt; Memposisikan ViewView GroupView group ini digunakan untuk mengelompokkan berbagai macam view. Jadi dia seperti div pada html. View group ini juga dapat didefinisikan sebagai parent sedangkan view didefinisikan sebagai child.Kode XML dari view grup digambarkan sebagai berikut :123456789101112131415&lt;LinearLayout android:orientation=\"vertical\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"&gt; &lt;TextView android:text=\"Guest List\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /&gt; &lt;TextView android:text=\"Kunai\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" /&gt;&lt;/LinearLayout&gt; Note :Perlu diketahui setiap XML yang kita buat harus kita tambahkan xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;. Kode tersebut biasa disebut XML namespace declaration. Ini digunkan untuk mendefinisikan bahwa XML kita digunakan untuk android. Macam-macam view grup : Linear LayoutView disusun secara berderet baik horizontal ataupun vertikal pada view grup. Untuk menggunakan Linear Layout cukup menggunakan tag LinearLayout. Vertical row, yaitu view yang disusun secara vertical atas-bawah. Untuk menggunakan vertical row cukup tambahkan atribut android:orientation=&quot;vertical&quot;. Horizontal column, yaitu view yang disusun secara horizontal kanan-kiri. Untuk menggunakan horizontal column cukup tambahkan atribut android:orientation=&quot;horizontal&quot;. Untuk mengatur panjang dan tinggi view dengan menyesuaikan parentnya dapat menggunakan sintaks sebagai berikut :1234567891011121314151617&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; &lt;TextView android:text=\"Guest List\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt; &lt;TextView android:text=\"Kunai\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt;&lt;/LinearLayout&gt; Pada kode diatas LinearLayout menggunakan match parent yang mengakibatkanya memiliki tinggi dan lebar sebesar resolusi layar. Begitu juga dengan text view yang menyesuaikan LinearLayout memiliki lebar sebesar layar. Untuk mengatur proporsi pajang dan lebar antar view kita dapat menggunakan android:layout_weight=&quot;1&quot; dan setiap panjang dan lebar diatur ke 0dp. Berikut contohnya :12345678910111213141516171819&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; &lt;TextView android:text=\"Guest List\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:layout_weight=\"1\" /&gt; &lt;TextView android:text=\"Kunai\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:layout_weight=\"1\" /&gt;&lt;/LinearLayout&gt; Relative LayoutView disusun secara sembarang. Posisi view dapat dibagi menjadi yaitu bagian atas, kanan, kiri dan bawah. Relative to parent, yaitu view yang disusun relatif berdasarkan pada parent. Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut 12345678&lt;RelativeView&gt; .... &lt;TextView android:layout_alignParentTop=\"true/false\" android:layout_alignParentButton=\"true/false\" android:layout_alignParentLeft=\"true/false\" android:layout_alignParentRight=\"true/false\"&gt;&lt;RelativeView&gt; Untuk mengatur perataan konten dapat menggunakan 123456&lt;RelativeView&gt; .... &lt;TextView android:layout_centerHorizontal=\"true/false\" android:layout_centerVertical=\"true/false\"&gt;&lt;/RelativeView&gt; Posisi tersebut dapat dicustom sesuka hati dan dapat di mix and match. Semisal untuk pojok kiri atas maka yang top dan left diberi nilai true dan seterusnya. Relative to other child, yaitu view yang disusun relatif berdasarkan pada child lainya. Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut 12345678&lt;RelativeView&gt; .... &lt;TextView android:layout_alignParentTop=\"true/false\" android:layout_alignParentButton=\"true/false\" android:layout_alignParentLeft=\"true/false\" android:layout_alignParentRight=\"true/false\"&gt;&lt;RelativeView&gt; https://icons8.com/android-icons/","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Android","slug":"Pemrograman/Android","permalink":"http://ciazhar.github.io/categories/Pemrograman/Android/"}],"tags":[]},{"title":"Introduction to Spring","slug":"pemrograman/spring/0-introduction-to-spring-boot","date":"un00fin00","updated":"un44fin44","comments":true,"path":"2017/04/23/pemrograman/spring/0-introduction-to-spring-boot/","link":"","permalink":"http://ciazhar.github.io/2017/04/23/pemrograman/spring/0-introduction-to-spring-boot/","excerpt":"","text":"Sekilas tentang SpringSpring Framework merupakan suatu framework untuk mempermudah dalam membangun aplikasi berbasis enterprise menggunakan bahasa-bahasa JVM. Secara konsep, project spring yang akan kita buat akan menggunakan beberapa design pattern seperti Model View Controller, Dependecy Injection, Aspec Oriented Programming, Object Relational Mapping dan lainya. Apabila anda merasa asing dengan beberapa istilah tersebut, silahkan anda mencari referensi di internet karena kita tidak akan membahas terlalu detail mengenai beberapa istilah tersebut.Pada Tutorial kali ini kita akan coba membuat aplikasi berbasis backend web menggunakan Spring Framework. Roadmap Belajar SpringBerikut sekilas peta jalan yang akan kita pelajari untuk dapat membuat aplikasi spring : Setup Project Spring Boot Membuat Web Menggunakan Spring Boot dan Thyeleaf Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL CRUD dengan Spring Data JPA Generate Content di Server Side Menggunakan Spring Data JPA dan Thymeleaf Generate Content di Client Side Menggunakan AngularJS Kardinalitas pada Spring Data JPA Konfigurasi yang sering digunakan untuk CRUD pada Spring Data JPA Migrasi Database dengan FlywayDB Otoriasai login dengan Spring Security Layouting dengan Thymeleaf Membuat Report dengan Jasper Report Oauth2 dengan Spring Security Single Signed On dengan Spring Security Stack untuk Spring Framework Full Stack Application","categories":[{"name":"Pemrograman","slug":"Pemrograman","permalink":"http://ciazhar.github.io/categories/Pemrograman/"},{"name":"Spring","slug":"Pemrograman/Spring","permalink":"http://ciazhar.github.io/categories/Pemrograman/Spring/"}],"tags":[]},{"title":"Bagian Processor","slug":"kuliah/orakom/orakom-bagian-processor","date":"un11fin11","updated":"un11fin11","comments":true,"path":"2017/04/17/kuliah/orakom/orakom-bagian-processor/","link":"","permalink":"http://ciazhar.github.io/2017/04/17/kuliah/orakom/orakom-bagian-processor/","excerpt":"","text":"ALU (Arithmetic and Logic Unit) ALU merupakan bagian pengolah biner di processor. ALU bertugas melalukan operasi aritmatika dan logika sesuai instruksi yang diberikan. Control Unit Control Unit bertugas memberikan arahan / kendali / kontrol terhadap operasi yang dilakukan oleh ALU Register Register merupakan perangkat memori sementara yang menyimpan data dari suatu program yang sedang berjalan.","categories":[{"name":"Teknologi","slug":"Teknologi","permalink":"http://ciazhar.github.io/categories/Teknologi/"},{"name":"Organisasi dan Arsitektur Komputer","slug":"Teknologi/Organisasi-dan-Arsitektur-Komputer","permalink":"http://ciazhar.github.io/categories/Teknologi/Organisasi-dan-Arsitektur-Komputer/"}],"tags":[{"name":"komputer","slug":"komputer","permalink":"http://ciazhar.github.io/tags/komputer/"}]},{"title":"Sistem Bilangan","slug":"kuliah/orakom/orakom-sistem-bilangan","date":"un11fin11","updated":"un11fin11","comments":true,"path":"2017/04/17/kuliah/orakom/orakom-sistem-bilangan/","link":"","permalink":"http://ciazhar.github.io/2017/04/17/kuliah/orakom/orakom-sistem-bilangan/","excerpt":"","text":"Macam-macam Sistem Bilangan Biner (basis 2)Simbol : 0,1 Oktal (basis 8)Simbol : 0,1,2,3,4,5,6,7 Desimal (basis 10)Simbol : 0,1,2,3,4,5,6,7,8.9 Heksal (basis 16)Simbol : 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 Konversi antar Sistem Bilangan Desimal ke Biner Contoh : Semisal kita akan mengubah 123(10) ke biner. Hal pertama yang harus kita lakukan adalah membagi angka tersebut dengan 2, kemudian hasil pembagian kita taruh dibagian bawah. Dan apabila angka habis dibagi 2 maka kita tulis 0 dan apabila bersisa kita tulis 1 di bagian samping. Lakukan langkah tersebut secara berulang-ulang sampai hasilnya tidak bisa dibagi 2 lagi. Contohnya adalah sebagai berikut : 12345678910111213123--- = 161--- = 130--- = 015--- = 17--- = 13--- = 11 Dari hasil diatas kita dapatkan hasil 1 1 1 1 0 1 1 (dibaca dari bawah). Jadi biner dari 123 adalah 1111011. Biner ke Desimal Contoh : Semisal kita akan mengubah 1111011(2) ke desimal. Hal pertama yang kita lakukan adalah mendefinisikan tiap digit dengan 2 pangkat nomer digit. Digit dihitung dari belakang. Contohnya adalah sebagai berikut : 12342^6 2^5 2^4 2^3 2^2 2^1 2^064 32 16 8 4 2 11 1 1 1 0 1 1 Kemudian kita tambahkan tiap hasil dari 2 pangkat nomer digit yang bilangan binernya 1. 64+32+16+8+4+2+1 = 123. Dari penjumlahan tersebut kita dapatkan hasil 123, jadi desimal dari 1111011 adalah 123.","categories":[{"name":"Teknologi","slug":"Teknologi","permalink":"http://ciazhar.github.io/categories/Teknologi/"},{"name":"Organisasi dan Arsitektur Komputer","slug":"Teknologi/Organisasi-dan-Arsitektur-Komputer","permalink":"http://ciazhar.github.io/categories/Teknologi/Organisasi-dan-Arsitektur-Komputer/"}],"tags":[{"name":"komputer","slug":"komputer","permalink":"http://ciazhar.github.io/tags/komputer/"}]},{"title":"Bagaimana Perangkat Elektronik Berjalan ?","slug":"kuliah/orakom/orakom_bagaimana-perangkat-elektronik-berjalan","date":"un66fin66","updated":"un33fin33","comments":true,"path":"2017/04/15/kuliah/orakom/orakom_bagaimana-perangkat-elektronik-berjalan/","link":"","permalink":"http://ciazhar.github.io/2017/04/15/kuliah/orakom/orakom_bagaimana-perangkat-elektronik-berjalan/","excerpt":"","text":"Dalam kehidupan sehari-hari kita sering sekali menggunakan perangkat elektronik seperti komputer, laptop dan hp. Perangkat elektronik tersebut sudah didesain sedimikian rupa agar dapat nyaman berinteraksi dengan penggunanya, baik dari desain, perangkat input dll. Tetapi pernahkah anda berpikir bagaimana cara kerjanya alat-alat tersebut? Bagaimana data dari keyboard, mouse atau perangkat input lainya diproses ? Dan tentunya akan banyak sekali pertanyaan mengenai hal tersebut. Pada kesempatan ini saya akan sedikit menceritakan bagaimana proses data di perangkat elektronik tersebut. Proses BootingHal pertama yang dilakukan perangkat saat proses booting adalah melakukan booting Sistem Operasi. Kemudian perangkat akan melakukan inisialisasi, yaitu melakukan checklist terhadap hardware yang terhubung dengan perangkat kita. Transfer Data pada KomputerData yang kita inputkan melalui perangkat masukan sebenarnya adalah kumpulan pola arus listrik yang dikonversi menjadi kode biner. Secara teknis untuk tegangan 0 volt akan dikonversi menjadi kode biner 0 dan tegangan 5 volt akan dikonversi menjadi kode biner 1. Proses konversi dari arus listrik menjadi biner ini dilakukan oleh Flip Flop yang terdiri dari kumpulan gerbang logika. Data biner tersebut kemudian dibawa menuju register yang ada pada processor untuk disimpan. Setiap kode biner akan menghuni satu space register. Pengggambaran bagaimana data tersebut disimpan adalah seperti gambar di bawah ini :1234567_________________________________| | | | || 1 | 2 | 3 | 4 | --&gt; Register|_______|_______|_______|_______| | | | | || 0 | 1 | 0 | 0 | --&gt; Biner|_______|_______|_______|_______| Lanjut, data yang ada pada register kemudian diproses, apakah akan dioutputkan atau akan disimpan sesuai dengan yang kita inginkan. Apabila ingin dioutputkan data akan ditransfer menuju perangkat keluaran yang dikehendaki, semisal layar monitor. Dan apabila ingin disimpan sebelumnya akan dikonversi menuju kode heksal. Proses konversi dari kode biner dan heksal dan sebaliknya dilakukan oleh Sistem Operasi. Data pada hardisk yang berupa kode heksal apabila ingin diproses maka harus dikonversi kembali menjadi kode desimal. Data tersebut kemudian diteruskan melalui RAM dan berakhir di Processor. Dalam tahap pemrosesan data, data tadi akan disimpan sementara pada cache memory yang ada pada processor.","categories":[{"name":"Teknologi","slug":"Teknologi","permalink":"http://ciazhar.github.io/categories/Teknologi/"},{"name":"Organisasi dan Arsitektur Komputer","slug":"Teknologi/Organisasi-dan-Arsitektur-Komputer","permalink":"http://ciazhar.github.io/categories/Teknologi/Organisasi-dan-Arsitektur-Komputer/"}],"tags":[{"name":"komputer","slug":"komputer","permalink":"http://ciazhar.github.io/tags/komputer/"}]},{"title":"Fill in form dan Function Key","slug":"kuliah/imk/ui-ux-fill-in-form-dan-function-key","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2017/04/14/kuliah/imk/ui-ux-fill-in-form-dan-function-key/","link":"","permalink":"http://ciazhar.github.io/2017/04/14/kuliah/imk/ui-ux-fill-in-form-dan-function-key/","excerpt":"","text":"FILL IN FORMDefinisi Fill in Form : Sebuah tabel data yang diwajibkan diisi oleh user, data tersebut biasanya digunakan untuk sebuah pendaftaran. Data yang diinputkan umumnya banyak keakuratan data, misal fill in form memerintahkan user untuk memasukkan data pribadi ( nama, umur, jenis kelamin dst ). Hal yang perlu diperhatikan terkait Fill In Form : Keyboard. Kegunaan Tab atau Mouse untuk memindahkan cursor. Maksud dari masing - masing field dan label. Metode dalam mengoreksi kesalahan. Kegunaan Enter dan Return. Pedoman dalam membuat Fill Inform : Berikan judul yang jelas dan memiliki arti. Instruksi yang komprehensif. Pengelompokkan dan pengurutan secara logikal. Layout ( Desain tata letak ) yang mudah dilihat. Berikan nama field yang dikenal secara umum. Berikan tempat yang jelas untuk menginputkan data, Pergerakan kursor yang nyaman. Berikan koreksi eror / penanganan kesalahan untuk setiap karakter tidak tepat yang diinputkan. Sertakan informasi mengenai status pengisian form. Kelebihan Fill In Form : Keterbiasaan Pengguna dalam Mengisi Form dapat mempermudah pengisian. Beban memori rendah. Perancangan yang mudah dengan berbagai alat/Software bantu perancangan tampilan. Isian Formulir yang disederhanakan. Kekurangan Fill In Form : Bila tak terbiasa, membutuhkan waktu bagi user untuk memahami dan mengisi form. Jika Formulir bermenu datar, akan memakan ruang pada layar. Pembuatan data pertanyaan harus logis dan tersusun dengan jelas jika tidak akan membuat user kebingungan. FUNCTION KEYSPendahuluan : Tahun 1986, IBM ( International Business Machine ) menambahkan beberapa tombol fungsi pada keyboard standard. Tombol ini dapat dipergunakan sebagai perintah khusus yang disertakan pada sistem operasi maupun aplikasi dan disebut function keys. Key Modal Styles : Penyampaian “aksi” melalui penekanan tombol-tombol yang diprogram sebelumnya untuk menjalankan perintah tertentu. Definisi : Tombol khusus yang terdapat pada keyboard yang memberikan masukan tanpa berhubungan dengan setiap karakter F1 s/d F12. Contoh Fungsi umumnya : 123456789101112F1 = Help.F2 = Merubah nama file.F3 = Search.alt + F4 = Menutup program yang sedang berjalan.F5 = Refresh.F6 = Memindahkan kursor ke Address bar.F7 = memeriksa ejaan/tata bahasa (Ms. Word).F8 = Tombol fungsi yang digunakan untuk masuk ke menu startup windows, biasa digunakan masuk ke Windows Safe Mode.F9 = Untuk membuka toolbar Measurements pada Quark 5.0.shift + F10 = Menampilkan menu shortcut ( MS Word ).F11 = Full Screen pada browser.shift + F12 = Save As ( MS. Word ). Kelebihan Function Keys : Mempermudah pekerjaan. Kecepatan yang lebih tinggi dan praktis. Dapat menjadi pengganti input saat mouse sedang error. Kekurangan Function Keys : Jarang Digunakan dan Diketahui oleh pengguna - pengguna baru.","categories":[{"name":"Teknologi","slug":"Teknologi","permalink":"http://ciazhar.github.io/categories/Teknologi/"},{"name":"Interaksi Manusia dan Komputer","slug":"Teknologi/Interaksi-Manusia-dan-Komputer","permalink":"http://ciazhar.github.io/categories/Teknologi/Interaksi-Manusia-dan-Komputer/"}],"tags":[{"name":"ui-ux","slug":"ui-ux","permalink":"http://ciazhar.github.io/tags/ui-ux/"}]},{"title":"Kritik dan Saran terhadap Website KPM Udinus","slug":"kuliah/imk/Kritik-dan-Saran-terhadap-Website-KPM-Udinus","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2017/04/11/kuliah/imk/Kritik-dan-Saran-terhadap-Website-KPM-Udinus/","link":"","permalink":"http://ciazhar.github.io/2017/04/11/kuliah/imk/Kritik-dan-Saran-terhadap-Website-KPM-Udinus/","excerpt":"","text":"Sekilas Tentang KPM UDINUSKantor Penjaminan Mutu Univeristas Dian Nuswantoro adalah suatu badan internal di bawah Universitas Dian Nuswantoro yang bertujuan untuk mengembangkan sistem penjaminan mutu, menyelenggarakan sistem audit mutu internal dalam rangka pelaksanaan sistem penjaminan mutu dan menjamin perbaikan mutu secara terus menerus terhadap pencapaian kinerja penyelenggaraan pendidikan tinggi di Universitas Dian Nuswantoro. Kritik dan Saran Copyright telah kadaluarsa. Seharusnya selalu diperbaharui secara konsekuen. Kemudian perlu ditambahkan instansi (udinus) karena KPM sendiri berada di bawah udinus. Foto dari Anggota KPM tidak proporsional dan tidak rapi. Pada laman web terlalu kecil sedangkan pada mobile terlalu besar. Pada laman web foto tidak center dan penulisanya tidak rapi. Seharusnya kontenya dikonfigurasi agar progresive dan rapi. Kami menyarankan menggunakan grid system yang ada pada bootstrap agar lebih mudah dalam mengkonfigurasinya. Tidak terdapat paging indeks halaman sehingga kontennya terlihat semua dan website terlihat tidak sedap di pandang mata. Seharusnya dikonfigurasi semisal untuk setiap laman hanya berisi 10 konten. Dan untuk mengakses konten lainya melalui indeks selanjutnya. Terdapat 2 tombol home pada halama utama yang membingungkan user. Seharusnya satu saja sudah cukup. Konten yang belum siap dipublikasikan sebaiknya tidak perlu di tampilkan di menu. (contohnya Pelatihan, Bantuan Teknis, Kunjungan dll) Terdapat laman yang kontenya terlalu sepi, sehingga perlu ditambahkan konten lain yang relevan. Perlu ditambahkan fasilitash search untuk memudahkan user mencari konten yang dikehendaki. Perlu dicantumkan kontak person pada bagian bawah web. Sehingga apabila terjadi permasalahan pada webiste dan sebagainya dapat langsung ditanggulangi. Seperti pada http://kjm.ugm.ac.id/ Perlu ditambahkan jadwal agenda kegiatan mengenai kpm. Seperti pada http://kjm.ugm.ac.id/ Perlu ditambahkan laman mengenai sambutan ketua kpm untuk menambah kesan hangat kepada pengunjung webste. Seperti pada http://kjm.ugm.ac.id/sambutan-rektor-universitas-gadjah-mada-prof-dr-pratikno-m-soc-sc/","categories":[{"name":"Teknologi","slug":"Teknologi","permalink":"http://ciazhar.github.io/categories/Teknologi/"},{"name":"Interaksi Manusia dan Komputer","slug":"Teknologi/Interaksi-Manusia-dan-Komputer","permalink":"http://ciazhar.github.io/categories/Teknologi/Interaksi-Manusia-dan-Komputer/"}],"tags":[]},{"title":"Bahasa Perintah dan Bahasa Alami","slug":"kuliah/imk/ui-ux_common-language-and-natural-language","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2017/03/27/kuliah/imk/ui-ux_common-language-and-natural-language/","link":"","permalink":"http://ciazhar.github.io/2017/03/27/kuliah/imk/ui-ux_common-language-and-natural-language/","excerpt":"","text":"Pendahuluan Tujuan dasar bahasa presisi kekompakan kemudahan dalam penulisan dan pembacaan mudah dipelajari sederhana dan mengurangi kesalahan mudah diingat Tujuan tingkat lebih tinggi Hubungan yang dekat antara realitas dan notasi. Kemudahan dalam melaksanakan manipulasi yang relevan dengan tugas. Kompatibilitas dengan notasi yang telah ada. Fleksibilitas untuk mengakomodasi pemakai pemula dan ahli. Ekspresif, mendukung kreativitas. Daya tarik visual. Kendala-kendala penggunaan Bahasa kapasitas manusia mengingat notasi kecocokan antara ingatan dan media penampil kemudahan berbicara(mengucapkan) Bahasa komputer yang efektifBahasa komputer yang efektif harus tidak hanya merepresentasikan tugas pemakai dan memenuhi kebutuhan manusia untuk berkomunikasi, tetapi juga harus selaras dengan mekanisme perekaman, manipulasi, dan penampilannya di komputer.Beberapa contoh bahasa yang efektif Bahasa pemrograman: Pemakaian noninteraktif: Fortran, COBOL, ALGOL, PL/I, Pascal. Inkremental: BASIC, LISP, APL, PROLOG. Kompilasi dan eksekusi cepat: C. Pemrograman tim, sharing, reusability: ADA, C++. Jaringan, cross-platform: Java. Scripting World Wide Web: PHP, JavaScript, VBScript. Alamat World Wide Web. Bahasa database query: SQL. Bahasa perintah command line: perintah Unix, MS-DOS. Strategi Organisasi perintah Simple command setSetiap perintah dipilih untuk melaksanakan tugas (task) tunggal, jumlah perintah sama dengan jumlah tugas.Contoh: vim editor (Unix):0 : go to start of line$ : go to end of line(space) : go right one spaceH : go left one spaceW : forward one wordb : backward one word) : forward one sentence( : backward one sentence Command plus argumentsPerintah diikuti argumen yang menunjukkan objek yang dimanipulasi.Contoh: 12COPY FILEA FILEBDEL FILEA Label keyword dapat membantu untuk meningkatkan keterbacaan dan meniadakan urutan. 1&lt;img src=\"gbr.gif\" width=\"40\" height=\"5\" alt=\"Gambar\"&gt; Command plus options and argumentsPerintah dapat berisi options untuk menunjukkan kondisi khusus.Jumlah argumen dan option yang banyak dapat meningkatkan tingkat kesalahan.Contoh: 12DIR C:\\WINDOWS\\*.EXE /S/W/P/O-Nls -alF /home/agus Hierarchical command structurePerangkat penuh perintah disusun menjadi struktur tree, seperti menu tree.Contoh: 123456Action Object DestinationCREATE File FileDISPLAY Process Local printerREMOVE Directory ScreenCOPY Remote printerMOVE Contoh di atas menghasilkan struktur berarti bagi5 × 3 × 4 = 60 tugas. Manfaat Struktur- Manfaat struktur: - Membantu proses belajar manusia, pemecahan masalah, dan ingatan. - Membantu task concepts, computer concepts, dan rincian sintaktik bahasa perintah. - Topik: - Urutan argumen yang konsisten - Simbol vs keyword - Struktur hierarkis dan kongruensi Urutan Argumen yang konsistensiBeberapa studi menunjukkan adanya manfaat urutan argumen yang konsisten. 123456Inconsistent order Consistent orderSEARCH file no, message id SEARCH message id, file noTRIM message id, segment size TRIM message id, segment sizeREPLACE message id, code no REPLACE message id, code noINVERT group size, message id INVERT message id, group size Simbol Lawan KeywordPenggunaan keyword lebih mudah daripada simbol. Pemakai berpengalaman dapat mengembangkan keterampilan untuk menggunakan notasi aneh sehingga variasi sintaktik tidak banyak berpengaruh. 12345Symbol Editor Keyword EditorFIND:/TOOTH/-1 BACKWARD TO “TOOTH”LIST;10 LIST 10 LINESRS:/KO/,/OK/;* CHANGE ALL “KO” TO “OK” Struktur Hierarkis dan KongruensiKongruen: pasangan yang berlawanan secara selaras dan berarti (simetris). Struktur hierarkis dan kongruensi dapat membantu ingatan pemakai. 1234567891011121314151617CongruentHierarchical NonhierarchicalMOVE ROBOT FORWARD ADVANCEMOVE ROBOT BACKWARD RETREATMOVE ARM FORWARD PUSHMOVE ARM BACKWARD PULLMOVE ARM RIGHT SWING OUTMOVE ARM LEFT SWING INNoncongruentHierarchical NonhierarchicalMOVE ROBOT FORWARD GOCHANGE ROBOT BACKWARD BACKCHANGE ARM FORWARD POKEMOVE ARM BACKWARD PULLCHANGE ARM RIGHT PIVOTMOVE ARM LEFT SWEEP Ringkasan Manfaat StrukturSumber struktur yang terbukti bermanfaat meliputi: - Konsistensi posisi - Konsistensi tatabahasa - Pasangan yang kongruen - Bentuk hierarkis Penamaan perintah Penamaan penting untuk proses belajar, pemecahan masalah, dan ingatan. Ketertentuan (specificity) vs keumuman (generality): Istilah-istilah yang spesifik lebih deskriptif dan lebih mudah diingat. Istilah-istilah yang umum lebih dikenal dan mudah diterima.Contoh pengujian untuk menambah dan menghapus teks (Black &amp; Moran): 1234567Infrequent, discriminating words insert deleteFrequent, discriminating words add removeInfrequent, nondiscriminating words amble perceiveFrequent, nondiscriminating words walk viewGeneral words (frequent, nondiscr.) alter correctNondiscriminating nonwords (nonsense) GAC MIKDiscriminating nonwords (icons) abc-adbc abc-ac Paling baik: “infrequent, discriminating”Paling buruk: general words.Nonsense cukup baik! Penyingkatan Perintah Pemotongan sederhana.directory -&gt; dir, delete -&gt; del. Buang huruf hidup dengan pemotongan sederhana.check disk -&gt; chkdsk, move -&gt; mv. Huruf pertama dan terakhir.sort -&gt; ST, block -&gt; BK. Huruf awal setiap kata dalam frase.change directory -&gt; cd, switch user -&gt; su. Singkatan standar dari konteks lain.quantity -&gt; QTY, transfer -&gt; XFER,backup -&gt; BAK. Fonik: fokus pada suara.execute -&gt; XQT, I seek you -&gt; ICQ,connection -&gt; CNXN. Menu perintahUntuk mengatasi beban penghafalan perintah, beberapa perancang memberikan daftar perintah yang tersedia, dalam format yang disebut menu perintah. Contoh: 123456789101112131415Lynx H)elp O)ptions P)rint G)o M)ain screen Q)uit /=search [delete]=history listPico ^G Get Help ^O Writeout ^R Read File ^X Exit ^J Justify ^W Where isWordStar --Cursor Movement-- | -Delete-^S char left ^D char right |^G char^A word left ^F word right |DEL chr lf^E line up ^X line down | ^T word rt --Scrolling–- |^Y line^Z line down ^W line up |^C screen up ^R screen down | Bahasa Alami di dalam komputer Natural-language interactionOperasi komputer menggunakan bahasa alami manusia (mis. Inggris) untuk memberi instruksi dan menerima respons. Natural-language queriesOperasi pada database relasional.Masih lebih buruk daripada SQL.Contoh: INTELLECT, Symantec Q&amp;A. Text-database searchingUntuk mencari database tekstual.Contoh: Ask Jeeves (ask.com). Natural-language text generationDigunakan untuk laporan (mis. Prakiraan cuaca, laboratorium medis).Di sisi artistik dapat menghasilkan puisi dan novel. Adventure and educational gamesPemakai menyatakan gerakan dan perintah dengan bahasa alami.Menarik karena sistem tak dapat diramalkan dan perlu dijelajahi. Pedoman bahasa perintah Buat model objek dan aksi yang eksplisit. Pilih nama yang berarti, spesifik, dan dapat dibedakan. Coba mencapai struktur hierarkis. Gunakan struktur yang konsisten (hierarki, urutan argumen, aksi-objek). Dukung aturan penyingkatan yang konsisten. Berikan kemampuan membuat makro bagi frequent users. Pertimbangkan menu perintah pada tampilan berkecepatan tinggi. Batasi jumlah perintah dan cara melakukan tugas.","categories":[{"name":"Teknologi","slug":"Teknologi","permalink":"http://ciazhar.github.io/categories/Teknologi/"},{"name":"Interaksi Manusia dan Komputer","slug":"Teknologi/Interaksi-Manusia-dan-Komputer","permalink":"http://ciazhar.github.io/categories/Teknologi/Interaksi-Manusia-dan-Komputer/"}],"tags":[{"name":"ui-ux","slug":"ui-ux","permalink":"http://ciazhar.github.io/tags/ui-ux/"}]},{"title":"Menu","slug":"kuliah/imk/ui-ux_menu","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2017/03/19/kuliah/imk/ui-ux_menu/","link":"","permalink":"http://ciazhar.github.io/2017/03/19/kuliah/imk/ui-ux_menu/","excerpt":"","text":"Pengertian MenuMenu adalah suatu penyajian petunjuk yang sudah di tentukan untuk memudahkan user. Tujuan MenuMemudahkan user dalam mengoperasikan suatu sistem yang mudah diingat dan dipahami. Kelebihan Menu Memudahkan bagi pengguna baru/tidak ahli Memungkinkan explorasi (pengguna bisa melihat menu untuk perintah lainnya yang cocok) Menginstruksikan pengambilan keputusan bagi pengguna Adanya penanganan kesalahan yang mudah (tidak perlu di-parsed sepeti halnya command entry) Pengguna tidak perlu mengingat item yang diinginkan Kekurangan Menu Tidak cocok untuk tampilan grafis kecil Cukup lambat bagi pengguna ahli/usser yang sering memakai sistem Terlalu banyak menu menyebabkan overload informasi Tipe Tipe MenuAda 2 macam tipe menu berdasarkan banyaknya sub menu pada suatu menu yaitu : Single Menu Multiple Combination Menu Single MenuPengertianSingle menu adalah menu yang berdiri secara independen tidak mempengaruhi yang lainnya. Macam-macamBinary MenuMenu yang terdiri dari dua pilihan. Multiple ItemSingle menu yang mempunyai pilihan lebih dari dua Multiple SelectionVariasi dari single menu yang memungkinkan user untuk memilih lebih dari satu pilihan yang di berikan. Pull Down dan Pop UpPull Down biasanya tersedia pada bagian atas menu bar sedangkan Pop Up keluar dari respon terhadap aksi pengguna ScrollingScrolling dan 2 dimensional menu yaitu menu dengan item list yang banyak sehingga beralasan untuk ditampilkan AlphaslidersAlphasliders menggunakan multiple level granularity pada pergerakan slider-nya atau scroll box. Alphaslider bisa mendukung untuk penggunakan menu dengan jumlah item yang banyak. Embedded LinksMerupakan menu dimana itemnya ditanamkan dalam bentuk teks dan grafik yang bisa ditekan atau dipilih Iconic MenuToolbars, atau palletes menu merupakan menu yang menawarkan banyak aksi yang bisa dipilih oleh pengguna dengan menekan untuk menampilkan. Multiple Combination MenuTree Structured MenusMembagi menu-menu dalam berbagai kelompok sehingga user tidak bingung. Linear SequenceBerfungsi untuk memudahkan user membuat suatu pilihan yang kompleks dan berguna untuk novice user (pemula). Simultaneous menusMemberikan semua pilihan yang mungkin secara bersamaan dan memperbolehkan user untuk memasukkan pilihan secara sembarang. Menu MapsMemperlihatkan semua menu yang ada. Berfungsi suntuk membantu user agar tidak bingung dengan menu yang ada. Cyclic NetworkTipe menu yang dapat bercabang-cabang dan dapat kembali ke menu utama atau menu sebelumnya Acyclic NetworkTipe menu yang dapat bercabang-cabang dan setiap menu dapat ditempu dengan beberapa cara namun tidak dapat kembali ke menu utama atau menu sebelumnya. Petunjuk Pembuatan MenuGuidelines untuk menu : Organisasikan menu berdasarkan jenis pekerjaan Lebih cenderung pada broad – shallow daripada narrow – deep Perlihatkan posisi dengan grafik, angka, ataupun judul Gunakan items sebagai judul untuk subtrees Pengelompokkan item harus memiliki arti Pembuatan urut – urutan item harus memiliki arti Gunakan kalimat singkat (keyword) Perhatikan konsistensi grammar, layout, dan terminologi Sediakan shortcut Perbolehkan user untuk langsung kembali ke menu sebelumnya dan main menu Pertimbangkan online help, response time, display rate, dan ukuran layar Hal-hal Yang Harus Diperhatikan Dalam Menu Layout: Judul Layout dan design(ukuran layar, display rate, character set dan teknik highlighting) Konsistensi (judul, penempatan item, intruksi, pesan kesalahan dan laporan status) Teknik (identasi, huruf besar/kecil,simbol,penanda posisi,cascading menu, magic lens) Pengaturan konten dapat dilakukan dengan memperhatikan hal-hal berikut:● Mengelompokkan suatu pekerjaan yang sama kedalam satu kategori● Membuat menu dengan berurutan, urutan bisa didasarkan pada waktu, nomor urutan dan lain-lain","categories":[{"name":"Teknologi","slug":"Teknologi","permalink":"http://ciazhar.github.io/categories/Teknologi/"},{"name":"Interaksi Manusia dan Komputer","slug":"Teknologi/Interaksi-Manusia-dan-Komputer","permalink":"http://ciazhar.github.io/categories/Teknologi/Interaksi-Manusia-dan-Komputer/"}],"tags":[{"name":"ui-ux","slug":"ui-ux","permalink":"http://ciazhar.github.io/tags/ui-ux/"}]}]}